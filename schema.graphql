"""
Directs the executor to deliver this part of the result after the initial result.
"""
directive @defer(
  """
  If false, this field _won't_ be deferred.
  """
  if: Boolean = true

  """
  A unique label to identify the deferred payload.
  """
  label: String
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to deliver this list item-by-item, after the requested `initialCount`.
"""
directive @stream(
  """
  If false, this field _won't_ be streamed.
  """
  if: Boolean = true

  """
  The number of items to return in the initial response.
  """
  initialCount: Int = 0

  """
  A unique label to identify the stream payload.
  """
  label: String
) on FIELD

"""
Autogenerated input type of AcceptContract
"""
input AcceptContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  contractRawId: Int @deprecated(reason: "only used to support some legacy frontend code")
  freelancerAgreesTerms: Boolean
  freelancerContactEmail: String
  freelancerFeedback: String
  freelancerMessage: String
  interviewDate: DateTime
  phone: String @deprecated(reason: "use updateUser to update the phone number")
}

"""
Autogenerated return type of AcceptContract.
"""
type AcceptContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of AcceptContractRequests
"""
input AcceptContractRequestsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  contractRawId: Int @deprecated(reason: "only used to support some legacy frontend code")
}

"""
Autogenerated return type of AcceptContractRequests.
"""
type AcceptContractRequestsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

type Answer implements Node {
  contractRequests: [ContractRequest!]
  id: ID!
  question: Question
  questionId: Int!
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  textualAnswer: String
  type: String!
  user: User
  userId: Int!
  video: Video
}

"""
API keys used to access Flexhire programmatically
"""
type ApiKey implements Node {
  createdAt: DateTime
  id: ID!

  """
  slice of the actual key, to be used to identify it
  """
  keySlice: String
  lastUsedAt: DateTime
  user: User
}

type ApiKeyTestResult {
  error: String
  valid: Boolean!
}

type ApplicationsResults {
  applications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  filteredOutCount: Int!
  filteredOutIds: [Int!]!
  highlightCount: Int!
  highlightCountMyTeam: Int!
  totalCount: Int!
  totalCountMyTeam: Int!
}

"""
Autogenerated input type of ApplyToJob
"""
input ApplyToJobInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobId: ID
  jobSlug: String @deprecated(reason: "use jobId instead")

  """
  used to track which external platform or context the user came from
  """
  ref: String

  """
  the page from which the user was referred before applying to the job
  """
  refererUrl: String

  """
  set to what status the job application should be recorded at
  """
  status: ContractStatus
}

"""
Autogenerated return type of ApplyToJob.
"""
type ApplyToJobPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

enum ApprovalTypeEnum {
  auto_approval
  manual_approval
}

"""
Autogenerated input type of ApprovePayrollItem
"""
input ApprovePayrollItemInput {
  bonusId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRatingFeedbackContinue: String
  clientRatingFeedbackStart: String
  clientRatingFeedbackStop: String
  clientRatingScore: Int
  expenseId: ID
  payrollItemId: ID
  salaryId: ID
  timesheetId: ID
}

"""
Autogenerated return type of ApprovePayrollItem.
"""
type ApprovePayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItem: PayrollItem
}

"""
Autogenerated input type of AutoLoginWithLink
"""
input AutoLoginWithLinkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the link's token
  """
  token: String!
}

"""
Autogenerated return type of AutoLoginWithLink.
"""
type AutoLoginWithLinkPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  link: Link
  loginPerformed: Boolean
}

type BackgroundCheck implements Node {
  completedAt: DateTime
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  createdAt: DateTime
  email: String
  firm: Firm
  firstName: String
  id: ID!
  invoiceItem: InvoiceItem
  lastName: String
  requestedBy: User
  status: BackgroundCheckStatusEnum!
  user: User
}

"""
The connection type for BackgroundCheck.
"""
type BackgroundCheckConnection {
  """
  A list of edges.
  """
  edges: [BackgroundCheckEdge]

  """
  A list of nodes.
  """
  nodes: [BackgroundCheck]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BackgroundCheckEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BackgroundCheck
}

enum BackgroundCheckStatusEnum {
  failed
  pending
  processing
  successful
  waiting
}

input BackgroundChecksFilters {
  status: BackgroundCheckStatusEnum
}

enum BackgroundThemeEnum {
  default
  light
}

type BankTransferDetails {
  achAccountNumber: String
  achRoutingNumber: String
  institutionName: String
  swiftCode: String
}

type BillingPlan implements Node {
  allowAtsJobIntegrations: Boolean
  allowBackgroundChecks: Boolean
  allowCareerPageIntegration: Boolean
  allowFlexhireRecruiters: Boolean
  allowMultipleManagers: Boolean
  allowPaymentsDisabledContracts: Boolean
  contractsHireMinMarginUsd: Float
  contractsHireSourcedByClientMargin: Float
  contractsHireSourcedByFlexhireMargin: Float
  contractsInvitationMargin: Float
  customerSuccessRep: Boolean
  dailyFlexhireRecruiterPerJobFeeUsd: Float
  dailyInviteContractFeeUsd: Float
  dailyJobFeeUsd: Float
  dailyManagerFeeUsd: Float
  dailyPaymentsDisabledContractFeeUsd: Float
  dailyPlanFeeUsd: Float
  dailySourcedByClientHireContractFeeUsd: Float
  dailySourcedByFlexhireHireContractFeeUsd: Float
  freePaymentsDisabledContractsLimit: Int
  hidden: Boolean
  highlighted: Boolean
  id: ID!
  maxCandidates: Int
  minimumManagers: Int
  name: String
  paymentMethodTypes: [PaymentMethodTypeLiteral!]
  rawId: Int
}

type BlogCategory implements Node {
  description: String
  id: ID!
  name: String
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogPostConnection
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  slug: String
  subcategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogSubcategoryConnection
}

"""
The connection type for BlogCategory.
"""
type BlogCategoryConnection {
  """
  A list of edges.
  """
  edges: [BlogCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [BlogCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BlogCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BlogCategory
}

type BlogPost implements Node {
  blogCategory: BlogCategory
  blogSubcategory: BlogSubcategory
  content: String
  createdAt: DateTime
  excerpt: String
  id: ID!
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  slug: String
  status: BlogPostStatusEnum
  title: String
  updatedAt: DateTime
  user: User
  video: Video
}

"""
The connection type for BlogPost.
"""
type BlogPostConnection {
  """
  A list of edges.
  """
  edges: [BlogPostEdge]

  """
  A list of nodes.
  """
  nodes: [BlogPost]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BlogPostEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BlogPost
}

enum BlogPostStatusEnum {
  approved
  draft
  published
}

type BlogSubcategory implements Node {
  category: BlogCategory
  description: String
  id: ID!
  name: String
  posts: BlogPost
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  slug: String
}

"""
The connection type for BlogSubcategory.
"""
type BlogSubcategoryConnection {
  """
  A list of edges.
  """
  edges: [BlogSubcategoryEdge]

  """
  A list of nodes.
  """
  nodes: [BlogSubcategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BlogSubcategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BlogSubcategory
}

type Bonus implements Node {
  contract: Contract
  currency: Currency
  description: String
  endDate: Date
  id: ID!
  itemType: String
  payrollItem: PayrollItem
  startDate: Date
  totalToPayClient: Money
  totalToPayFreelancer: Money
}

"""
The connection type for Bonus.
"""
type BonusConnection {
  """
  A list of edges.
  """
  edges: [BonusEdge]

  """
  A list of nodes.
  """
  nodes: [Bonus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BonusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Bonus
}

type BonusPreview {
  clientBonus: Money
  memberBonus: Money
}

input BonusPreviewAttributes {
  clientBonus: MoneyInput
  memberBonus: MoneyInput
}

input BonusesFilters {
  amount: Int
  clientId: ID
  clientStatus: PayrollItemClientStatus @deprecated(reason: "use pipelineStatus instead")
  contractStatuses: [ContractStatus!]
  date: Date
  endDate: Date
  freelancerStatus: PayrollItemFreelancerStatus @deprecated(reason: "use pipelineStatus instead")
  invoiceNum: Int
  name: String
  pipelineStatus: PayrollItemPipelineStatus
  startDate: Date
  status: PayrollItemStatus
}

"""
Autogenerated input type of CancelApplication
"""
input CancelApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelApplication.
"""
type CancelApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
represents a match between a Flexhire member and a Job
"""
type Candidate implements Node {
  """
  the associated contract for this member and job, if any
  """
  contract: Contract
  freelancer: User!
  id: ID!

  """
  if true, the user has been invited to apply to this job by the client
  """
  invitedToJob: Boolean
  job: Job

  """
  reasons for why the member can't apply to this job, if any
  """
  jobIncompatibilityReasons: [String!]
}

"""
The connection type for Candidate.
"""
type CandidateConnection {
  """
  A list of edges.
  """
  edges: [CandidateEdge]

  """
  A list of nodes.
  """
  nodes: [Candidate]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type CandidateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Candidate
}

type CandidateToNotify implements Node {
  id: ID!
  rawId: Int
  status: String
}

input CandidateToNotifyAttributes {
  rawId: Int
}

input CandidatesFilters {
  adminMode: Boolean
  availableOnly: Boolean
  bookmarked: Boolean
  bookmarkedByUserId: Int
  canWorkInTheUs: Boolean
  contractStatus: String
  countries: [String!]
  distanceMiles: Float
  distanceOriginLatitude: Float
  distanceOriginLongitude: Float
  excludeHidden: Boolean
  experience: Int
  freelancerSubtypes: [CandidatesFiltersFreelancerSubtype!]
  hasAnswers: Boolean
  hasProjectSubmission: Boolean
  hasVideoIntroduction: Boolean
  jobsIds: [Int!]
  locationType: String
  managedTeamSizes: [String!]
  managedTeams: Boolean
  maxAnnualCompensation: Int
  maxClientRate: Float
  maxUniversityRank: Int
  missingAnswers: Boolean
  missingProjectSubmission: Boolean
  missingVideoIntroduction: Boolean
  name: String
  positionTypes: String
  rating: String
  showNotNotified: Boolean
  showNotified: Boolean
  skills: [SkillFilter!]
  timezone: Int
  timezoneRange: Int
  university: String
  verifiedOnly: Boolean
}

input CandidatesFiltersFreelancerSubtype {
  groupIndex: Int
  id: Int!
  name: String
}

type ChatBot implements Node {
  avatarUrl: String
  directChatThread: ChatThread
  id: ID!
  name: String
  user: User
}

type ChatMessage implements Node {
  chatThread: ChatThread!
  contract: Contract
  createdAt: DateTime!
  id: ID!
  label: String
  message: String!
  rawId: Int
  sender: Recipient!
  user: User @deprecated(reason: "use the sender field")
}

"""
The connection type for ChatMessage.
"""
type ChatMessageConnection {
  """
  A list of edges.
  """
  edges: [ChatMessageEdge]

  """
  A list of nodes.
  """
  nodes: [ChatMessage]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ChatMessageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ChatMessage
}

input ChatMessageFilters {
  excludeSelf: Boolean

  """
  if true, only returns messages unread by current user. Returns nothing if used while logged out
  """
  unread: Boolean
}

"""
Autogenerated return type of ChatMessageReceived.
"""
type ChatMessageReceivedPayload {
  chatMessage: ChatMessage
}

type ChatThread implements Node {
  avatarUrl: String
  chatBots: [ChatBot!]!
  chatMessages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ChatMessageFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChatMessageConnection
  createdAt: DateTime
  defaultTitle: String
  enableMeetingRoom: Boolean
  id: ID!
  lastActivityAt: DateTime
  meetingRoom: String
  otherUser: User @deprecated(reason: "use the recipient field")
  rawId: Int
  recipient: Recipient
  threadType: ChatThreadTypeEnum!
  title: String
  users: [User!]!
}

"""
The connection type for ChatThread.
"""
type ChatThreadConnection {
  """
  A list of edges.
  """
  edges: [ChatThreadEdge]

  """
  A list of nodes.
  """
  nodes: [ChatThread]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ChatThreadEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ChatThread
}

enum ChatThreadTypeEnum {
  direct
  group
}

"""
Autogenerated return type of ChatThreadUpdated.
"""
type ChatThreadUpdatedPayload {
  chatThread: ChatThread
}

"""
Autogenerated input type of CheckoutInvoice
"""
input CheckoutInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  invoiceId: ID
  invoiceRawId: Int @deprecated(reason: "only used to support some legacy frontend code")
}

"""
Autogenerated return type of CheckoutInvoice.
"""
type CheckoutInvoicePayload {
  chargeStatus: String @deprecated(reason: "use stripeCharge.status instead")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientSecret: String
  errors: [Error!]
  invoice: Invoice
  paymentMethod: PaymentMethod
  paymentMethodType: PaymentMethodTypeLiteral @deprecated(reason: "use paymentMethod.paymentMethodType instead")
  stripeCharge: StripeCharge
}

"""
Autogenerated input type of CloseJob
"""
input CloseJobInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobId: ID!
}

"""
Autogenerated return type of CloseJob.
"""
type CloseJobPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of CompleteReference
"""
input CompleteReferenceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comments: String
  completeReferenceToken: String!
  email: String
  name: String!
  otherRelation: String
  ratingProfessional: Int!
  referenceName: String
  relation: ReferenceRelationEnum!
  wouldRecommend: Boolean!
}

"""
Autogenerated return type of CompleteReference.
"""
type CompleteReferencePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  message: String
}

"""
Autogenerated input type of CompleteSignature
"""
input CompleteSignatureInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signatureId: String!
}

"""
Autogenerated return type of CompleteSignature.
"""
type CompleteSignaturePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  signature: Signature
}

"""
Autogenerated input type of CompleteVideoUpload
"""
input CompleteVideoUploadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  videoId: ID!
}

"""
Autogenerated return type of CompleteVideoUpload.
"""
type CompleteVideoUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  video: Video
}

type Configuration {
  advertisingProviders: [String!]
  allowJobsWithNoRates: Boolean
  backgroundCheckPriceUsd: Float
  creditCardFixedFee: Float
  creditCardPercentageFee: Float
  currenciesExemptFromConversionFee: [String!]
  currencyConversionPercentageFee: Float
  enableAutoBonuses: Boolean
  enableCompanyVideos: Boolean
  enableContractAgreements: Boolean
  enableHiringManager: Boolean
  enablePwaInstall: Boolean
  enableServiceWorker: Boolean
  enableServiceWorkerAutoSkipWaiting: Boolean
  enableServiceWorkerUpdateDetection: Boolean
  frontendBuildId: String
  invitationMinClientRateUsd: Float
  jobsMinClientRate: Money
  jobsMinClientRateUsd: Float @deprecated(reason: "being phased out, don't use")
  maxCandidates: Int
  maxTimelineEntries: Int
  minHourlyRate: Money
  minHourlyRateUsd: Float @deprecated(reason: "being phased out, don't use")
  oauthSignupProviders: [String!]
  paymentMethodTypes: [String!]
  payoutMethodTypes: [PayoutMethodTypeEnum!]
  profileFeedbackParticipants: [User!]
  profileFeedbackParticipantsIds: [Int!]
  sepaLimit: Float
  stripeConnectSupportedCountries: [String!]
  supportedCurrencies: [Currency!] @deprecated(reason: "use top level currencies field")
  useVideoCdn: Boolean
  videoCdnUrl: String
  videoMaxDuration: Float
  videoMaxDurationCompany: Float
  videoMinDuration: Float
}

"""
Autogenerated input type of ConfirmEmail
"""
input ConfirmEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of ConfirmEmail.
"""
type ConfirmEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

type Contract implements Node {
  allowHireAccess: Boolean
  allowManageAccess: Boolean
  allowTextualAnswers: Boolean
  answers: [Video!]
  applicantSource: String
  availabilityType: [String!]
  backgroundCheck: BackgroundCheck
  bonusClientRate: Money
  bonusPeriod: ContractBonusPeriod

  """
  preview the client and member rates of a bonus
  """
  bonusPreview(input: BonusPreviewAttributes!): BonusPreview
  bookmarked: Boolean
  calendlyUrl: String

  """
  get the corresponding Candidate object for this contract
  """
  candidate: Candidate
  city: String
  client: User
  clientAgreesTerms: Boolean
  clientRate: Money
  clientRejectionComments: String
  clientRejectionMessage: String
  clientRejectionReason: String
  contractFeedbacks: [ContractFeedback!]
  contractIntroductionSentAt: DateTime
  contractRate(
    """
    if passed, returns the active rate at the given time, otherwise returns the currently active rate
    """
    currentAt: DateTime
  ): ContractRate
  contractRates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractRatesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractRateConnection
  contractRequests: [ContractRequest!]
  contractType: ContractTypeEnum
  contractorAgreementSignature: Signature
  contractorStatementOfWorkSignature: Signature
  country: String
  createdAt: DateTime!
  currency: Currency!
  dailyFee: Money
  defaultDistance: Float

  """
  true if current user can delete this contract
  """
  deletable: Boolean
  description: String
  disableMinUsdMarginLimit: Boolean
  discountId: Int

  """
  true if current user can edit this contract
  """
  editable: Boolean
  employeeType: EmployeeTypeEnum
  employerOfRecordTemplate: EmployerOfRecordTemplate
  enableTimesheets: Boolean
  endDate: Date
  estimatedNextSalaryPayoutDate: DateTime
  firm: Firm
  freelancer: User
  freelancerAgreesTerms: Boolean
  freelancerContactEmail: String
  freelancerEmail: String
  freelancerFeedback: String
  freelancerFirstName: String
  freelancerLastName: String
  freelancerMessage: String
  freelancerName: String
  freelancerPhone: String
  freelancerRate: Money
  freelancerTimezoneName: String
  fullAddress: String
  hidden: Boolean
  id: ID!
  inheritor: User
  interviewAcceptedAt: DateTime
  interviewDate: DateTime
  interviewDate1: DateTime
  interviewDate2: DateTime
  interviewDate3: DateTime
  interviewDate4: DateTime
  interviewNote: String
  interviewSchedulingMethod: String
  interviewTimezone: String
  interviewerEmail: String
  interviewerName: String
  interviewerRole: String
  invitationType: InvitationTypeEnum
  invitedBy: User
  invitedToApplyAt: DateTime
  invoiceRecipient: User
  isFirmAdmin: Boolean
  isManager: Boolean
  job: Job
  jobApplicationNotifiedToAdminsAt: DateTime
  jobApplicationReminderSentAt: DateTime
  jobApplicationSentAt: DateTime
  jobApplicationSentByFreelancerAt: DateTime
  jobOpportunitySentAt: DateTime
  jobTimezone: String
  jobTitle: String
  lastInteractionAt: DateTime
  latitude: Float
  locationType: String
  longitude: Float
  managedOffPlatform: Boolean
  margin: Float
  minClientRate: Float
  minMarginUsd: Float
  negativeFeedbackCount: Int
  nextSalaryInvoiceDate: DateTime
  notifyChanges: Boolean
  offerNote: String
  paychecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PaychecksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaycheckConnection
  paymentMode: PaymentModeEnum
  paymentsEnabled: Boolean
  payrollItems: [PayrollItem!]
  positionTypes: [String!]
  positiveFeedbackCount: Int
  postInterviewRemindersSentAt: DateTime
  previousStatus: String
  profileJobIncompatibilityReasons: [String!]
  projectLength: String
  projectLengthInMonths: Int
  projectSubmission: ProjectSubmission
  purchaseOrderNumber: String
  rateMode: RateMode
  rawId: Int

  """
  platform from which the applicant came from when applying to the job. Most
  common values are linkedin, iframe (for iframe integration)
  """
  ref: String

  """
  user which brought this applicant to the platform via referral code, if any
  """
  referer: User

  """
  url from which the applicant came from when applying to the job
  """
  refererUrl: String
  referralOpportunitySentAt: DateTime
  region: String
  requestsStatus: ContractRequestsStatus
  requireApprovalForPayments: Boolean
  signableDocuments: [SignableDocument!]
  sourcedByClient: Boolean
  startDate: Date
  stats: PayrollStats
  status: ContractStatus!
  tags: [Tag!]
  textualAnswers: [Answer!]
  timesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection
  token: String
  updatedAt: DateTime!
}

enum ContractBonusPeriod {
  """
  grant a bonus every month
  """
  monthly

  """
  grant a bonus every year
  """
  yearly
}

"""
The connection type for Contract.
"""
type ContractConnection {
  """
  A list of edges.
  """
  edges: [ContractEdge]

  """
  A list of nodes.
  """
  nodes: [Contract]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ContractEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Contract
}

type ContractFeedback implements Node {
  contract: Contract
  description: String
  id: ID!
  ratingPositive: Boolean!
  status: String
  updatedAt: DateTime
  user: User
}

type ContractPreview {
  clientRate: Money

  """
  the existing contract being updated, or null for new contracts
  """
  contract: Contract
  contractType: ContractTypeEnum
  currency: Currency
  dailyFee: Money
  discountId: Int
  employerOfRecordTemplate: EmployerOfRecordTemplate
  freelancerFirstName: String
  freelancerRate: Money
  invitationType: InvitationTypeEnum
  margin: Float
  minClientRate: Money
  minMarginUsd: Float
  paymentsEnabled: Boolean
  rateMode: RateMode
}

input ContractPreviewAttributes {
  availabilityType: [String!]
  clientId: ID
  clientRate: MoneyInput
  contractId: ID
  currency: String
  discountCode: String
  freelancerEmail: String
  freelancerId: ID
  freelancerRate: MoneyInput
  jobId: ID
  rateMode: RateMode
}

type ContractRate implements Node {
  clientRate: Money
  contract: Contract
  currency: Currency
  endsAt: DateTime
  freelancerRate: Money
  id: ID!
  margin: Int
  paymentMode: PaymentModeEnum
  rateMode: RateMode
  startedAt: DateTime
}

"""
The connection type for ContractRate.
"""
type ContractRateConnection {
  """
  A list of edges.
  """
  edges: [ContractRateEdge]

  """
  A list of nodes.
  """
  nodes: [ContractRate]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ContractRateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ContractRate
}

input ContractRatesFilters {
  future: Boolean
  order: SortOrder
  past: Boolean
  sort: ContractRatesOrderEnum
}

enum ContractRatesOrderEnum {
  started_at
}

type ContractRequest implements Node {
  allowTextualAnswers: Boolean
  contract: Contract
  id: ID!
  project: Project
  projectSubmission: ProjectSubmission
  question: Question
  requestType: ContractRequestTypeEnum
  status: ContractRequestStatusEnum
}

enum ContractRequestStatusEnum {
  """
  the member has completed the request
  """
  completed

  """
  the request has been sent to the member
  """
  pending

  """
  the member has declined to complete the request
  """
  rejected

  """
  the member has accepted the request
  """
  started
}

enum ContractRequestTypeEnum {
  """
  provide an answer to a question
  """
  answer

  """
  provide a submission for a project
  """
  project_submission

  """
  provide a video introduction for your profile
  """
  video_introduction
}

enum ContractRequestsStatus {
  """
  all requests have been completed
  """
  completed

  """
  requests have been made
  """
  pending

  """
  member has declined to complete requests
  """
  rejected

  """
  member has accepted the requests
  """
  started
}

enum ContractStageEnum {
  contract
  interview
  offer
}

"""
aggregate counts of contracts
"""
type ContractStats {
  interviewsActionableCount: Int!
  interviewsTotalCount: Int!
  offersActionableCount: Int!
  offersTotalCount: Int!
}

enum ContractStatus {
  """
  contract is active and ongoing
  """
  active

  """
  expired contract has been deleted
  """
  deleted

  """
  active/paused contract has ended
  """
  expired

  """
  member has declined invitation to apply
  """
  freelancer_not_interested

  """
  interview request has been accepted by the member
  """
  interview_accepted

  """
  interview request has been rejected by the member
  """
  interview_rejected

  """
  member has started applying to the job
  """
  job_application_draft

  """
  member has been invited by the client to apply to the job
  """
  job_application_invited

  """
  member has sent the job application
  """
  job_application_sent

  """
  member has visited the job page
  """
  job_viewed

  """
  an offer has been made via hire pipeline or by inviting an off-platform user
  """
  offer_made

  """
  the member has turned down the offer
  """
  offer_rejected

  """
  contract is active and ongoing, but timesheet submission and payments are paused
  """
  paused

  """
  interview has been requested by the client
  """
  pending

  """
  potential referrer or applicant for the job
  """
  potential

  """
  during the hiring process, the member has been rejected by the client or an offer has been withdrawn
  """
  rejected
}

enum ContractTypeEnum {
  """
  freelancer that gets paid the full amount and handles their own taxes
  """
  contractor

  """
  registered employee with an Employer of Record
  """
  employee
}

"""
Autogenerated return type of ContractUpdated.
"""
type ContractUpdatedPayload {
  contract: Contract
}

input ContractsFilters {
  adminsOnly: Boolean
  approvalType: ApprovalTypeEnum
  clientId: ID
  clientRawId: Int @deprecated(reason: "used only for legacy frontend code")
  contractType: ContractTypeEnum
  enableTimesheets: Boolean
  excludeSelf: Boolean
  firmId: ID
  freelancerId: ID
  freelancerRawIdOrSlug: String @deprecated(reason: "used only for legacy frontend code")
  invitationType: InvitationTypeEnum
  jobId: ID
  managersOnly: Boolean
  membersOnly: Boolean
  name: String
  paymentMode: PaymentModeEnum
  paymentsEnabled: Boolean
  skillsIds: [Int!]
  stage: ContractStageEnum
  startDateInPast: Boolean
  statuses: [ContractStatus!]
  tagsIds: [Int!]
  withJobScreening: Boolean
  withoutJobScreening: Boolean
}

"""
Autogenerated input type of CreateAnswer
"""
input CreateAnswerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  questionId: ID
  questionRawId: Int @deprecated(reason: "only used in legacy frontend code")
  textualAnswer: String!
}

"""
Autogenerated return type of CreateAnswer.
"""
type CreateAnswerPayload {
  answer: Answer

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of CreateApiKey
"""
input CreateApiKeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateApiKey.
"""
type CreateApiKeyPayload {
  apiKey: ApiKey

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  this is the only way you can read the actual key! Make sure not to lose it
  """
  key: String
}

"""
Autogenerated input type of CreateBackgroundCheck
"""
input CreateBackgroundCheckInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  firmId: ID!
  firstName: String!
  lastName: String!
}

"""
Autogenerated return type of CreateBackgroundCheck.
"""
type CreateBackgroundCheckPayload {
  backgroundCheck: BackgroundCheck

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of CreateBlogPost
"""
input CreateBlogPostInput {
  blogCategoryId: ID
  blogCategoryRawId: Int @deprecated(reason: "only used in legacy frontend code")
  blogSubcategoryId: ID
  blogSubcategoryRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String!
  excerpt: String
  published: Boolean
  title: String!
  videoId: ID
  videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of CreateBlogPost.
"""
type CreateBlogPostPayload {
  blogPost: BlogPost

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of CreateChatThread
"""
input CreateChatThreadInput {
  avatarUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  title: String
  userIds: [ID!]
  userRawIds: [Int!] @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of CreateChatThread.
"""
type CreateChatThreadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of CreateContractRate
"""
input CreateContractRateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: MoneyInput!
  contractId: ID!
  rateMode: RateMode!
  startedAt: DateTime!
}

"""
Autogenerated return type of CreateContractRate.
"""
type CreateContractRatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractRate: ContractRate
  errors: [Error!]
}

"""
Autogenerated input type of CreateCustomSkill
"""
input CreateCustomSkillInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerTypeIds: [Int!]!
  name: String!
}

"""
Autogenerated return type of CreateCustomSkill.
"""
type CreateCustomSkillPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  skill: Skill
}

"""
Autogenerated input type of CreateExpense
"""
input CreateExpenseInput {
  amount: MoneyInput!
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String!
  expenseDate: Date!
  projectCode: String
  receiptUrl: String!
}

"""
Autogenerated return type of CreateExpense.
"""
type CreateExpensePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  expense: Expense
}

"""
Autogenerated input type of CreateJobIntegration
"""
input CreateJobIntegrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firmId: ID!
  greenhouseJobId: String!
  integrationName: JobIntegrationNameForImportEnum!
}

"""
Autogenerated return type of CreateJobIntegration.
"""
type CreateJobIntegrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobIntegration: JobIntegration
}

"""
Autogenerated input type of CreateLink
"""
input CreateLinkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerId: ID
  jobId: ID
}

"""
Autogenerated return type of CreateLink.
"""
type CreateLinkPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  link: Link
}

"""
Autogenerated input type of CreatePaymentMethod
"""
input CreatePaymentMethodInput {
  accountId: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  institutionName: String
  mask: String
  name: String
  paymentMethodType: PaymentMethodTypeLiteral!
  sessionId: String
  token: String
}

"""
Autogenerated return type of CreatePaymentMethod.
"""
type CreatePaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  paymentMethod: PaymentMethod
}

"""
Autogenerated input type of CreateProjectSubmission
"""
input CreateProjectSubmissionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  projectId: ID
  projectRawId: Int @deprecated(reason: "only used to support some legacy frontend code")

  """
  pass this to create a custom project
  """
  projectTitle: String
  screenshotUrl: String
  status: ProjectSubmissionStatusEnum
  url: String!
}

"""
Autogenerated return type of CreateProjectSubmission.
"""
type CreateProjectSubmissionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  projectSubmission: ProjectSubmission
}

"""
Autogenerated input type of CreateQuestion
"""
input CreateQuestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  title: String!
}

"""
Autogenerated return type of CreateQuestion.
"""
type CreateQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  question: Question
}

"""
Autogenerated input type of CreateResume
"""
input CreateResumeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if set, copy parsed data to profile, defaults to true
  """
  copyToProfile: Boolean

  """
  original file name
  """
  filename: String

  """
  original mime type
  """
  mimetype: String
  url: String!
}

"""
Autogenerated return type of CreateResume.
"""
type CreateResumePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  resume: Resume
}

"""
Autogenerated input type of CreateSignableDocuments
"""
input CreateSignableDocumentsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  documents: [SignableDocumentAttributes!]!
}

"""
Autogenerated return type of CreateSignableDocuments.
"""
type CreateSignableDocumentsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
  signableDocuments: [SignableDocument!]
}

"""
Autogenerated input type of CreateTimesheet
"""
input CreateTimesheetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  endDate: Date
  projectCodes: [String!]
  startDate: Date
  submit: Boolean
  timesheetEntries: [TimesheetEntryAttributes!]
}

"""
Autogenerated return type of CreateTimesheet.
"""
type CreateTimesheetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheet: Timesheet
}

"""
Autogenerated input type of CreateVideo
"""
input CreateVideoInput {
  """
  if set, indicates the blog post for which the video is saved as the video content piece
  """
  blogPostId: ID
  blogPostRawId: Int @deprecated(reason: "only used to support some legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  expected video file extension; infers mime-type
  """
  extension: String!

  """
  if set, indicates the firm for which the video is saved as the company page video
  """
  firmId: ID
  firmRawId: Int @deprecated(reason: "only used to support some legacy frontend code")

  """
  if false, the video will not be displayed on the public profile
  """
  public: Boolean

  """
  if set, indicates the question for which the video is saved as an answer
  """
  questionId: ID
  questionRawId: Int @deprecated(reason: "only used to support some legacy frontend code")

  """
  if set, indicates the video type without knowing its associated model
  """
  videoType: VideoTypeEnum
}

"""
Autogenerated return type of CreateVideo.
"""
type CreateVideoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  uploadUrl: String
  video: Video
}

"""
Autogenerated input type of CreateWebhook
"""
input CreateWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  defaults to true. If false we will not send events to this webhook.
  """
  enabled: Boolean

  """
  HTTP POST requests with JSON bodies will be sent to this URL. The fields on
  the body are 'event_name', 'timestamp' (unix integer format) and 'records'
  (array of string IDs of related records)
  """
  url: String!
}

"""
Autogenerated return type of CreateWebhook.
"""
type CreateWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just created
  """
  webhook: Webhook
}

type Currency implements Node {
  allowContracts: Boolean
  allowInvoices: Boolean
  code: String
  conversionFee: Boolean
  iconUrl: String
  id: ID!
  symbol: String
}

"""
represents a date of the following format: YYYY-MM-DD
"""
scalar Date

"""
represents a timestamp of the ISO8601 format
"""
scalar DateTime

"""
Autogenerated input type of DeactivatePayoutMethod
"""
input DeactivatePayoutMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
}

"""
Autogenerated return type of DeactivatePayoutMethod.
"""
type DeactivatePayoutMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of DeleteAnswer
"""
input DeleteAnswerInput {
  answerId: ID
  answerRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteAnswer.
"""
type DeleteAnswerPayload {
  answer: Answer

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of DeleteApiKey
"""
input DeleteApiKeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteApiKey.
"""
type DeleteApiKeyPayload {
  apiKey: ApiKey

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of DeleteBlogPost
"""
input DeleteBlogPostInput {
  blogPostId: ID
  blogPostRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBlogPost.
"""
type DeleteBlogPostPayload {
  blogPost: BlogPost

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of DeleteContract
"""
input DeleteContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  contractRawId: Int @deprecated(reason: "only used to support some legacy frontend code")
}

"""
Autogenerated return type of DeleteContract.
"""
type DeleteContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of DeleteContractRate
"""
input DeleteContractRateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractRateId: ID!
}

"""
Autogenerated return type of DeleteContractRate.
"""
type DeleteContractRatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractRate: ContractRate
  errors: [Error!]
}

"""
Autogenerated input type of DeletePaymentMethod
"""
input DeletePaymentMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeletePaymentMethod.
"""
type DeletePaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the payment method just deleted
  """
  paymentMethod: PaymentMethod
}

"""
Autogenerated input type of DeleteProjectSubmission
"""
input DeleteProjectSubmissionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectSubmissionId: ID
  projectSubmissionRawId: Int @deprecated(reason: "only used to support some legacy frontend code")
}

"""
Autogenerated return type of DeleteProjectSubmission.
"""
type DeleteProjectSubmissionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  projectSubmission: ProjectSubmission
}

"""
Autogenerated input type of DeleteReference
"""
input DeleteReferenceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  referenceId: ID
  referenceRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of DeleteReference.
"""
type DeleteReferencePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  reference: Reference
}

"""
Autogenerated input type of DeleteTimesheet
"""
input DeleteTimesheetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  timesheetId: ID
}

"""
Autogenerated return type of DeleteTimesheet.
"""
type DeleteTimesheetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheet: Timesheet
}

"""
Autogenerated input type of DeleteUser
"""
input DeleteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  required when deleting own account
  """
  password: String

  """
  omit this to delete your own account
  """
  userId: ID
}

"""
Autogenerated return type of DeleteUser.
"""
type DeleteUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of DeleteVideo
"""
input DeleteVideoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  videoId: ID
  videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of DeleteVideo.
"""
type DeleteVideoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  video: Video
}

"""
Autogenerated input type of DeleteWebhook
"""
input DeleteWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteWebhook.
"""
type DeleteWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just deleted
  """
  webhook: Webhook
}

"""
a subscription to a category of emails. Can be used to customize email preferences
"""
type EmailSubscription implements Node {
  """
  whether the subscription is active (meaning emails are sent)
  """
  active: Boolean

  """
  if false, the subscription is not applicable for this user and the emails won't be sent
  """
  enabled: Boolean
  id: ID!

  """
  identifies which subscription it is
  """
  subscriptionName: SubscriptionName
  user: User

  """
  whether the user has enabled this subscription. If false, the emails won't be sent.
  """
  userEnabled: Boolean
}

enum EmployeeTypeEnum {
  """
  flexhire is the employer of record for this employee
  """
  employed_by_flexhire

  """
  flexhire is using a partner as employer of record for this employee
  """
  employed_by_partner
}

"""
fee associated to an employer of record template
"""
type EmployerOfRecordFee implements Node {
  autoInclude: Boolean
  baseCharge: Money
  chargePercentage: Money
  currency: Currency
  employerOfRecordTemplate: EmployerOfRecordTemplate
  feeApplicationType: FeeApplicationTypeEnum
  id: ID!
  name: String
  percentageType: String
  refundable: Boolean
}

"""
Flexhire Associate/Partner company that handles EOR contracts for Flexhire
"""
type EmployerOfRecordPartner implements Node {
  currency: Currency
  id: ID!
  name: String
}

"""
set of common fees for employee-type contracts
"""
type EmployerOfRecordTemplate implements Node {
  employerOfRecordFees: [EmployerOfRecordFee!]
  employerOfRecordPartner: EmployerOfRecordPartner
  id: ID!
  name: String
}

type Error {
  message: String!
}

type Expense implements Node {
  amount: Money
  contract: Contract
  currency: Currency
  description: String
  expenseDate: Date
  expenseType: ExpenseTypeEnum
  id: ID!
  itemNum: Int
  payrollItem: PayrollItem
  projectCode: String
  rawId: Int
  receiptUrl: String
  timesheet: Timesheet
}

"""
The connection type for Expense.
"""
type ExpenseConnection {
  """
  A list of edges.
  """
  edges: [ExpenseEdge]

  """
  A list of nodes.
  """
  nodes: [Expense]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ExpenseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Expense
}

enum ExpenseTypeEnum {
  capex
  opex
}

input ExpensesFilters {
  clientId: ID
  clientStatus: PayrollItemClientStatus @deprecated(reason: "use pipelineStatus instead")
  contractStatuses: [ContractStatus!]
  endDate: Date
  freelancerStatus: PayrollItemFreelancerStatus @deprecated(reason: "use pipelineStatus instead")
  invoiceNum: Int
  name: String
  pipelineStatus: PayrollItemPipelineStatus
  startDate: Date
  status: PayrollItemStatus
}

"""
Autogenerated input type of ExpireContract
"""
input ExpireContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!

  """
  if this contract is for a manager on the firm, specify who will inherit the managed assets. Defaults to the current user
  """
  inheritorId: ID
}

"""
Autogenerated return type of ExpireContract.
"""
type ExpireContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

enum FeeApplicationTypeEnum {
  """
  this fee is applied at the end of the contract
  """
  offboarding

  """
  this fee is applied at the beginning of the contract
  """
  onboarding

  """
  this fee is applied monthly
  """
  recurrent
}

"""
Autogenerated input type of FetchStripeLoginUrl
"""
input FetchStripeLoginUrlInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
}

"""
Autogenerated return type of FetchStripeLoginUrl.
"""
type FetchStripeLoginUrlPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  loginUrl: String
}

type Firm implements Node {
  activeMembersCount: Int
  additionalInvoiceText: String
  allowDisplayApplicantSource: Boolean
  allowInvoiceAutoCharge: Boolean
  allowJobsWithNoRates: Boolean
  allowNoPaymentMethod: Boolean
  applications(filters: CandidatesFilters): ApplicationsResults
  backgroundChecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BackgroundChecksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BackgroundCheckConnection
  backgroundTheme: BackgroundThemeEnum
  billingPlan: BillingPlan
  billingPlanStartedAt: DateTime
  bonuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BonusesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BonusConnection
  candidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: CandidatesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CandidateConnection

  """
  the active contract the current user has with this firm
  """
  contract: Contract
  contractStats: ContractStats
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  currency: Currency
  customerSuccessRep: User
  description: String
  emailList(contractIds: [ID!], contractRawIds: [Int!] @deprecated(reason: "only used in legacy frontend code")): [String!]
  emailsForInvoices: [String!]
  expenses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ExpensesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExpenseConnection
  freelancerSubtypes: [FreelancerSubtype!]
  greenhouseConfigured: Boolean
  hireSourcedByClientMargin: Float @deprecated(reason: "use firm.billingPlan values")
  hireSourcedByFlexhireMargin: Float @deprecated(reason: "use firm.billingPlan values")
  id: ID!
  instantBackgroundCheckPayment: Boolean
  internalRecruiter: User
  inviteMargin: Float @deprecated(reason: "use firm.billingPlan values")
  invoice(rawId: Int @deprecated(reason: "only used in legacy frontend code")): Invoice @deprecated(reason: "only used in legacy frontend code")
  invoiceSalariesInAdvance: Boolean
  invoiceSchedule: InvoiceSchedule
  invoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: InvoicesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InvoiceConnection
  invoicesSummary(filters: InvoicesFilters): InvoicesSummary
  job(id: ID, slug: String @deprecated(reason: "only used in legacy frontend code")): Job
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  jobsForIntegration(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobForIntegrationFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobForIntegrationConnection
  lastAutoInvoiceGenerationAt: DateTime
  legacyBilling: Boolean
  linkedinCompanyId: String
  logoUrl: String
  managerForNonPayrollFees: User
  member(jobSlug: String, profileSlugOrEmail: String): Member
  minSalaryDaysToInvoice: Int
  name: String
  nextAutoInvoiceDate: DateTime
  paymentMethod: PaymentMethod
  paymentMethodTypes: [String!]
  paymentMethods(cardsOnly: Boolean, exceptCards: Boolean): [PaymentMethod!]
  paymentNetTermsForNonPayroll: Int
  paymentNetTermsForPayroll: Int
  payoutMode: PayoutMode
  payrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection
  purchaseOrderNumberForNonPayrollFees: String
  rawId: Int
  salaries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SalariesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalaryConnection
  screening(filters: CandidatesFilters): ApplicationsResults

  """
  true if current user has this firm in their firms list
  """
  self: Boolean
  signableDocuments: [SignableDocument!]
  skills: [Skill!]
  slug: String
  tags: [Tag!]
  testJobIntegrationApiKey(apiKey: String!, integrationName: JobIntegrationNameForImportEnum!): ApiKeyTestResult
  timesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection
  timezoneName: String
  unifyInvoicesInPreferredCurrency: Boolean
  users: [User!]
  video: Video
  webhooks: [Webhook!]
  website: String
}

"""
The connection type for Firm.
"""
type FirmConnection {
  """
  A list of edges.
  """
  edges: [FirmEdge]

  """
  A list of nodes.
  """
  nodes: [Firm]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type FirmEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Firm
}

"""
Autogenerated return type of FirmUpdated.
"""
type FirmUpdatedPayload {
  firm: Firm
}

"""
Autogenerated input type of ForgotPassword
"""
input ForgotPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of ForgotPassword.
"""
type ForgotPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  message: String
}

type FreelancerSubtype implements Node {
  featuredFreelancers: [User!]
  featuredQuestions: [Question!]
  freelancerType: FreelancerType
  iconUrl: String
  id: ID!
  name: String
  rawId: Int
  screeningQuestions: [Question!]
  slug: String
}

input FreelancerSubtypeAttributes {
  groupIndex: Int
  rawId: Int
}

type FreelancerType implements Node {
  featuredFreelancers(skillSlug: String): [User!]
  featuredQuestions: [Question!]
  freelancerSubtypes: [FreelancerSubtype!]
  iconUrl: String
  id: ID!
  jobsHaveCodeTests: Boolean
  name: String
  profilesRequireSkills: Boolean
  rawId: Int
  screeningQuestions: [Question!]
  skills: [Skill!]
  slug: String
}

input FreelancerTypeAttributes {
  rawId: Int
}

"""
Autogenerated return type of FrontendVersionDeployed.
"""
type FrontendVersionDeployedPayload {
  buildId: String
}

"""
Autogenerated input type of GrantBonus
"""
input GrantBonusInput {
  autoApprove: Boolean
  clientAmount: MoneyInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  description: String
  endDate: Date
  startDate: Date
}

"""
Autogenerated return type of GrantBonus.
"""
type GrantBonusPayload {
  bonus: Bonus

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

type Institute implements Node {
  continent: String
  country: String
  id: ID!
  name: String
  nationalRank: Int
  rankingYear: Int
  rawId: Int @deprecated(reason: "only used in legacy frontend code")
  worldRank: String
}

"""
The connection type for Institute.
"""
type InstituteConnection {
  """
  A list of edges.
  """
  edges: [InstituteEdge]

  """
  A list of nodes.
  """
  nodes: [Institute]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type InstituteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Institute
}

input InvitationRecipientAttributes {
  freelancerData: InvitationRecipientData
  freelancerId: ID
  jobId: ID
  jobTitle: String
  requestBackgroundCheck: Boolean
}

input InvitationRecipientData {
  email: String!
  firstName: String!
  lastName: String!
}

enum InvitationTypeEnum {
  """
  this contract was a hire that was executed via Flexhire
  """
  hire

  """
  this contract was a pre-existing hire that was then entered in Flexhire
  """
  invitation
}

"""
Autogenerated input type of InviteFriend
"""
input InviteFriendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String
}

"""
Autogenerated return type of InviteFriend.
"""
type InviteFriendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  sent: Boolean!
}

type Invoice implements Node {
  """
  payout to individuals is expected to be initiated at this time when payouts are configured to wait for client payment
  """
  assumedPayoutInitiationAt: Date
  bankTransferDetails: BankTransferDetails
  capitalExpenditureSubtotal: Money
  client: User

  """
  true if the client has paid and payment has proccessed
  """
  clientPaid: Boolean

  """
  timestamp of client payment completion
  """
  clientPaidAt: DateTime

  """
  when the payment was initiated by the customer
  """
  clientPaymentStartedAt: DateTime

  """
  status value for the customer
  """
  clientStatus: InvoiceClientStatus
  createdAt: DateTime

  """
  url to download the CSV version
  """
  csvUrl: String
  currency: Currency

  """
  deadline for when client payment must be initiated
  """
  dueDate: Date
  emailedAt: DateTime

  """
  end of associated billing period
  """
  endDate: Date
  expenses: [Expense!]
  expensesAmount: Money
  firm: Firm
  id: ID!

  """
  date of issue
  """
  invoiceDate: DateTime
  invoiceItems: [InvoiceItem!]
  invoiceItemsExchangeRates: [InvoiceExchangeRate!]
  invoiceItemsSubtotal: Money

  """
  invoice number
  """
  invoiceNum: Int
  isPaymentProcessing: Boolean
  lastEmailedAt: DateTime
  operatingExpenditureSubtotal: Money
  overdue: Boolean

  """
  preview the payment for this invoice
  """
  paymentPreview(
    """
    omit this to use the company's default payment method for the preview
    """
    paymentMethodId: ID
  ): InvoicePaymentPreview
  paymentProcessingFeeIncluded: Boolean
  paymentStartedAt: DateTime @deprecated(reason: "use clientPaymentStartedAt")

  """
  payout to individuals is expected to be initiated before this date, when
  payouts are configured to not wait for client payment
  """
  payoutDueDate: Date

  """
  url to download the PDF version
  """
  pdfUrl: String
  rawId: Int
  salaries: [Salary!]

  """
  start of associated billing period
  """
  startDate: Date

  """
  raw status
  """
  status: InvoiceStatus!
  timesheets: [Timesheet!]

  """
  unique string token to identify this invoice
  """
  token: String
  totalToPayClient: Money
  unassignedExpenditureSubtotal: Money
}

enum InvoiceClientStatus {
  """
  the invoice is still being built and is not complete
  """
  draft

  """
  the invoice has been issued, but not emailed to the firm yet
  """
  not_requested

  """
  the invoice was due in the past but the customer payment has not been initiated yet
  """
  overdue

  """
  the customer payment has completed
  """
  paid

  """
  the customer payment has been initiated but has not completed yet
  """
  payment_processing

  """
  the invoice has been issued and emailed
  """
  requested

  """
  the invoice has been voided
  """
  void
}

"""
The connection type for Invoice.
"""
type InvoiceConnection {
  """
  A list of edges.
  """
  edges: [InvoiceEdge]

  """
  A list of nodes.
  """
  nodes: [Invoice]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type InvoiceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Invoice
}

type InvoiceExchangeRate {
  fromCurrency: Currency
  toCurrency: Currency
  value: Float
}

type InvoiceItem implements Node {
  amountExchanged: Boolean
  amountPerUnit: Money
  associatedPeriodHumanized: String
  contract: Contract
  currency: Currency
  description: String
  endDate: Date
  id: ID!
  invoice: Invoice
  itemType: InvoiceItemItemType
  itemTypeHumanized: String
  numUnits: Int
  payrollItem: PayrollItem
  projectCodesHumanized: String
  rawId: Int
  startDate: Date
  subjectName: String
  totalAmount: Money
}

enum InvoiceItemItemType {
  """
  client request and we waiting for payment
  """
  background_check

  """
  refunding excess payments by the customer
  """
  credit_note

  """
  manually created invoice items
  """
  custom

  """
  fee for an EOR contract
  """
  employer_of_record_fee

  """
  legacy type for open jobs for landis
  """
  job_fee

  """
  fee for a third party integration
  """
  job_integration_activation_fee

  """
  legacy type for managers fee for landis
  """
  manager_fee

  """
  fee fom the third party payment system, mostly for exchange.
  """
  payment_processing_fee

  """
  for billing a payroll item
  """
  payroll

  """
  for invoicing the client when a referral has to be paid and the client has added a referral prize to the job
  """
  referral_boost

  """
  fees for usage history
  """
  tracking_log
}

"""
previews a payment of a given invoice with a given payment method
"""
type InvoicePaymentPreview {
  canPay: Boolean
  creditCardFixedFee: Float
  creditCardPercentageFee: Float
  currency: Currency
  currencyCompatible: Boolean
  currencyConversionPercentageFee: Float
  feeInvoiceItem: InvoiceItem
  feesIncluded: Boolean
  insufficientFunds: Boolean
  invoice: Invoice
  maximumLimit: Money
  overMaximumLimit: Boolean
  paymentMethod: PaymentMethod
  totalToPayClient: Money
}

"""
Autogenerated input type of InvoicePayrollItems
"""
input InvoicePayrollItemsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the recipient of the created invoice(s)
  """
  invoiceRecipientId: ID

  """
  the items to put in the invoice
  """
  payrollItemIds: [ID!]!
}

"""
Autogenerated return type of InvoicePayrollItems.
"""
type InvoicePayrollItemsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  invoiceItems: [InvoiceItem!]
  invoices: [Invoice!]
  payrollItems: [PayrollItem!]
}

enum InvoiceSchedule {
  """
  every other week
  """
  biweekly

  """
  once per month
  """
  monthly

  """
  once per week
  """
  weekly
}

enum InvoiceStatus {
  """
  the invoice has been issued
  """
  active

  """
  the invoice is still being built and is not complete
  """
  draft

  """
  the invoice has been voided
  """
  void
}

"""
Autogenerated return type of InvoiceUpdated.
"""
type InvoiceUpdatedPayload {
  invoice: Invoice
}

input InvoicesFilters {
  clientPaymentDueInPast: Boolean
  clientRawId: Int @deprecated(reason: "only used in legacy frontend code")
  freelancerId: ID
  fromDueDate: Date
  invoiceNum: Int
  order: SortOrder
  sort: String
  status: InvoiceClientStatus
  toDueDate: Date
  total: Float
  unpaidByClient: Boolean
  userId: ID
}

type InvoicesSummary {
  currency: Currency!
  overdueBalance: Money!
  overdueCount: Int!
  unpaidBalance: Money!
  unpaidCount: Int!
}

"""
position/job at a company
"""
type Job implements Node {
  activeJobIntegrationsNames: [String!]
  allowTextualAnswers: Boolean!
  applications(filters: CandidatesFilters): ApplicationsResults
  autoRenew: Boolean
  autoSendScreeningRequests: Boolean
  automaticallyNotifyCandidates: Boolean
  availabilityType: String
  candidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: CandidatesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CandidateConnection
  candidatesToNotify: [CandidateToNotify!]

  """
  for non-remote jobs
  """
  city: String
  clientRate: Money
  clientRateCents: Int

  """
  contract between the current user and the job, if any
  """
  contract: Contract
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection

  """
  for non-remote jobs. ISO 3166-1 alpha-2 code, lowercase
  """
  country: String
  createdAt: DateTime
  currency: Currency
  defaultDistance: Float
  description: String
  descriptionExperience: String
  descriptionResponsibilities: String
  expiresAt: DateTime
  firm: Firm
  freelancerRate: Money
  freelancerRateCents: Int
  freelancerSubtypes: [FreelancerSubtype!]! @deprecated(reason: "use job.jobSubtypes")
  freelancerType: FreelancerType

  """
  for non-remote jobs
  """
  fullAddress: String
  hireStats(filters: JobHireStatsFilters): JobHireStats
  hiringManager: User
  hiringManagerType: String
  id: ID!
  internalRecruiter: User

  """
  ISO 3166-1 alpha-2 codes, lowercase
  """
  jobCountries: [String!]!
  jobIntegrations: [JobIntegration!]
  jobSkills: [JobSkill!]!
  jobSocialIntegrations: [String!]
  jobSubtypes: [JobSubtype!]!
  locationLatitude: Float
  locationLongitude: Float
  locationType: JobLocationTypeEnum
  margin: Float
  markup: Float
  minClientRate: Money
  minClientRateCents: Int
  minFreelancerRate: Money
  minFreelancerRateCents: Int
  minMarginUsd: Float
  numberOfHires: Int
  positionTypes: [Position!]!
  project: Project
  projectLengthInMonths: Int
  questions: [Question!]
  rateMode: RateMode
  rawId: Int
  recruiters: [User!]
  referralBounty: Money

  """
  referral to share this job to others
  """
  referralFromSelf: Referral

  """
  for non-remote jobs
  """
  region: String
  requestVideoIntroduction: Boolean!
  requiredExperienceYears: Int
  resumeRequiredToApply: Boolean!
  screening(filters: CandidatesFilters): ApplicationsResults
  screeningRequestMessageTemplate: String
  slug: String
  status: JobStatus
  timezoneIdentifier: String
  timezoneRange: Int
  timezoneUtcOffset: Int
  title: String!
  updatedAt: DateTime
  user: User
}

"""
The connection type for Job.
"""
type JobConnection {
  """
  A list of edges.
  """
  edges: [JobEdge]

  """
  A list of nodes.
  """
  nodes: [Job]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type JobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Job
}

type JobForIntegration {
  """
  external ID of the job, coming from the external integration
  """
  id: String!
  title: String!
}

"""
The connection type for JobForIntegration.
"""
type JobForIntegrationConnection {
  """
  A list of edges.
  """
  edges: [JobForIntegrationEdge]

  """
  A list of nodes.
  """
  nodes: [JobForIntegration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type JobForIntegrationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: JobForIntegration
}

input JobForIntegrationFilters {
  """
  name of the integration to list suitable jobs from
  """
  integrationName: JobIntegrationNameForImportEnum
}

type JobHireStats {
  appliedCount: Int
  clickedCount: Int
  hiredCount: Int
  interviewedCount: Int
  offeredCount: Int
  screenedCount: Int
  viewedCount: Int
}

input JobHireStatsFilters {
  fromDate: Date
  source: String
  toDate: Date
}

type JobIntegration implements Node {
  active: Boolean
  enabledByUser: Boolean
  id: ID!
  job: Job
  jobIntegrationProvider: JobIntegrationProvider
  postingStatus: String
  publicationExpires: DateTime
  publishedJobUrl: String
  rawId: Int @deprecated(reason: "only used in legacy frontend ode")
}

enum JobIntegrationNameForImportEnum {
  greenhouse
}

type JobIntegrationProvider {
  activationFeeUsd: Float
  advertising: Boolean!
  dailyFeeUsd: Float
  name: String!
  supportedActions: [String!]!
}

enum JobLocationTypeEnum {
  """
  contract is active and ongoing
  """
  active
  anywhere

  """
  expired contract has been deleted
  """
  deleted

  """
  active/paused contract has ended
  """
  expired

  """
  member has declined invitation to apply
  """
  freelancer_not_interested
  full_address

  """
  interview request has been accepted by the member
  """
  interview_accepted

  """
  interview request has been rejected by the member
  """
  interview_rejected

  """
  member has started applying to the job
  """
  job_application_draft

  """
  member has been invited by the client to apply to the job
  """
  job_application_invited

  """
  member has sent the job application
  """
  job_application_sent
  job_timezone

  """
  member has visited the job page
  """
  job_viewed

  """
  an offer has been made via hire pipeline or by inviting an off-platform user
  """
  offer_made

  """
  the member has turned down the offer
  """
  offer_rejected

  """
  contract is active and ongoing, but timesheet submission and payments are paused
  """
  paused

  """
  interview has been requested by the client
  """
  pending

  """
  potential referrer or applicant for the job
  """
  potential

  """
  during the hiring process, the member has been rejected by the client or an offer has been withdrawn
  """
  rejected
  specific_countries
}

type JobSkill implements Node {
  groupIndex: Int
  id: ID!
  name: String @deprecated(reason: "use skill.name instead")
  rawId: Int
  rawSkillId: Int @deprecated(reason: "use skill.rawId instead")
  required: Boolean
  requiredYears: Int
  skill: Skill

  """
  the current user's matching UserSkill, if any
  """
  userSkill: UserSkill
}

input JobSkillAttributes {
  groupIndex: Int
  name: String
  rawId: Int
  rawSkillId: Int
  required: Boolean
  requiredYears: Int
}

enum JobStatus {
  """
  job is closed
  """
  closed

  """
  job is saved as draft
  """
  draft

  """
  job is opened
  """
  opened
}

type JobSubtype implements Node {
  freelancerSubtype: FreelancerSubtype
  groupIndex: Int
  id: ID!
  rawId: Int
}

enum JobType {
  """
  for freelance jobs, usually paid hourly
  """
  freelance

  """
  for permanent jobs, usually paid with a fixed salary
  """
  permanent
}

union JobView = Job | Referral

input JobsFilters {
  search: String
  status: JobStatus
  userId: ID
}

type Link implements Node {
  autoLogin: Boolean!
  chatThread: ChatThread
  chatUser: User
  contract: Contract
  emailSubscription: EmailSubscription
  firm: Firm
  freelancer: User
  id: ID!
  job: Job
  linkType: LinkTypeEnum
  token: String!
  unsubscribeFromAllEmails: Boolean!
  user: User
}

enum LinkTypeEnum {
  candidate
  chat_thread
  chat_user
  login
  profile_feedback
  unsubscribe
}

"""
Autogenerated input type of LinkedinAccessToken
"""
input LinkedinAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  not needed if current user is already linked to linkedin
  """
  code: String
}

"""
Autogenerated return type of LinkedinAccessToken.
"""
type LinkedinAccessTokenPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of Login
"""
input LoginInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  jobSlug: String
  password: String!
  recaptchaToken: String
  referer: String
  refererUrl: String
  remember: Boolean
}

"""
Autogenerated return type of Login.
"""
type LoginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of Logout
"""
input LogoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of Logout.
"""
type LogoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  configuration: Configuration
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of MakeOffer
"""
input MakeOfferInput {
  allowHireAccess: Boolean
  allowManageAccess: Boolean
  availabilityType: [String!]
  bonusClientRate: MoneyInput
  bonusPeriod: ContractBonusPeriod
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: MoneyInput
  currency: String
  discountCode: String
  enableTimesheets: Boolean
  endDate: Date
  firmId: ID!
  freelancerRecipients: [InvitationRecipientAttributes!]
  invitationMessage: String
  invoiceRecipientId: ID
  invoiceSchedule: InvoiceSchedule @deprecated(reason: "call updateFirm to change this value")
  isFirmAdmin: Boolean
  offerNote: String
  paymentMode: PaymentModeEnum
  purchaseOrderNumber: String
  rateMode: RateMode
  requireApprovalForPayments: Boolean
  startDate: Date
}

"""
Autogenerated return type of MakeOffer.
"""
type MakeOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contracts: [Contract!]
  errors: [Error!]
}

"""
Autogenerated input type of MarkChatThreadRead
"""
input MarkChatThreadReadInput {
  chatThreadId: ID
  chatThreadRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of MarkChatThreadRead.
"""
type MarkChatThreadReadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
}

"""
Autogenerated input type of Masq
"""
input MasqInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID
  userRawId: Int @deprecated(reason: "only used by legacy frontend code")
}

"""
Autogenerated return type of Masq.
"""
type MasqPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

type Member {
  contract: Contract
  freelancer: User!
  job: Job
}

enum MemberStatusEnum {
  """
  contract is active and ongoing
  """
  active

  """
  expired contract has been deleted
  """
  deleted

  """
  active/paused contract has ended
  """
  expired

  """
  member has declined invitation to apply
  """
  freelancer_not_interested

  """
  interview request has been accepted by the member
  """
  interview_accepted

  """
  interview request has been rejected by the member
  """
  interview_rejected

  """
  member has started applying to the job
  """
  job_application_draft

  """
  member has been invited by the client to apply to the job
  """
  job_application_invited

  """
  member has sent the job application
  """
  job_application_sent

  """
  member has visited the job page
  """
  job_viewed

  """
  an offer has been made via hire pipeline or by inviting an off-platform user
  """
  offer_made

  """
  the member has turned down the offer
  """
  offer_rejected

  """
  contract is active and ongoing, but timesheet submission and payments are paused
  """
  paused

  """
  interview has been requested by the client
  """
  pending

  """
  potential referrer or applicant for the job
  """
  potential

  """
  during the hiring process, the member has been rejected by the client or an offer has been withdrawn
  """
  rejected
  screening_incomplete
}

input MembersFilters {
  actionableOnly: Boolean
  contractStatus: MemberStatusEnum
  hasVideoIntro: Boolean
  hiddenOnly: Boolean
  jobId: ID
  name: String
  status: UserStatus
  statuses: [UserStatus!]
}

"""
a Money object
"""
type Money {
  cents: Int!
  currency: Currency!
  exchangedTo(currency: String!): Money
  formatted(nullifyWhenZero: Boolean): String
  value: Float!
}

"""
a Money Input object
"""
input MoneyInput {
  currencyCode: String!
  value: Float!
}

type Mutation {
  """
  as a member, accept interview or offer
  """
  acceptContract(
    """
    Parameters for AcceptContract
    """
    input: AcceptContractInput!
  ): AcceptContractPayload

  """
  accepts contract requests
  """
  acceptContractRequests(
    """
    Parameters for AcceptContractRequests
    """
    input: AcceptContractRequestsInput!
  ): AcceptContractRequestsPayload

  """
  create a pending job application or submit a job application
  """
  applyToJob(
    """
    Parameters for ApplyToJob
    """
    input: ApplyToJobInput!
  ): ApplyToJobPayload

  """
  approve payroll item by its ID or using the ID of its content
  """
  approvePayrollItem(
    """
    Parameters for ApprovePayrollItem
    """
    input: ApprovePayrollItemInput!
  ): ApprovePayrollItemPayload

  """
  login via an auto-login link
  """
  autoLoginWithLink(
    """
    Parameters for AutoLoginWithLink
    """
    input: AutoLoginWithLinkInput!
  ): AutoLoginWithLinkPayload
  cancelApplication(
    """
    Parameters for CancelApplication
    """
    input: CancelApplicationInput!
  ): CancelApplicationPayload
  checkoutInvoice(
    """
    Parameters for CheckoutInvoice
    """
    input: CheckoutInvoiceInput!
  ): CheckoutInvoicePayload

  """
  close an open job
  """
  closeJob(
    """
    Parameters for CloseJob
    """
    input: CloseJobInput!
  ): CloseJobPayload
  completeReference(
    """
    Parameters for CompleteReference
    """
    input: CompleteReferenceInput!
  ): CompleteReferencePayload
  completeSignature(
    """
    Parameters for CompleteSignature
    """
    input: CompleteSignatureInput!
  ): CompleteSignaturePayload

  """
  signal S3 upload completion of a video
  """
  completeVideoUpload(
    """
    Parameters for CompleteVideoUpload
    """
    input: CompleteVideoUploadInput!
  ): CompleteVideoUploadPayload
  confirmEmail(
    """
    Parameters for ConfirmEmail
    """
    input: ConfirmEmailInput!
  ): ConfirmEmailPayload
  createAnswer(
    """
    Parameters for CreateAnswer
    """
    input: CreateAnswerInput!
  ): CreateAnswerPayload

  """
  creates a new API key for the current user
  """
  createApiKey(
    """
    Parameters for CreateApiKey
    """
    input: CreateApiKeyInput!
  ): CreateApiKeyPayload
  createBackgroundCheck(
    """
    Parameters for CreateBackgroundCheck
    """
    input: CreateBackgroundCheckInput!
  ): CreateBackgroundCheckPayload
  createBlogPost(
    """
    Parameters for CreateBlogPost
    """
    input: CreateBlogPostInput!
  ): CreateBlogPostPayload
  createChatThread(
    """
    Parameters for CreateChatThread
    """
    input: CreateChatThreadInput!
  ): CreateChatThreadPayload

  """
  schedule a contract rate change for the future
  """
  createContractRate(
    """
    Parameters for CreateContractRate
    """
    input: CreateContractRateInput!
  ): CreateContractRatePayload
  createCustomSkill(
    """
    Parameters for CreateCustomSkill
    """
    input: CreateCustomSkillInput!
  ): CreateCustomSkillPayload
  createExpense(
    """
    Parameters for CreateExpense
    """
    input: CreateExpenseInput!
  ): CreateExpensePayload
  createJobIntegration(
    """
    Parameters for CreateJobIntegration
    """
    input: CreateJobIntegrationInput!
  ): CreateJobIntegrationPayload
  createLink(
    """
    Parameters for CreateLink
    """
    input: CreateLinkInput!
  ): CreateLinkPayload
  createPaymentMethod(
    """
    Parameters for CreatePaymentMethod
    """
    input: CreatePaymentMethodInput!
  ): CreatePaymentMethodPayload

  """
  as a member, submit or update a code test
  """
  createProjectSubmission(
    """
    Parameters for CreateProjectSubmission
    """
    input: CreateProjectSubmissionInput!
  ): CreateProjectSubmissionPayload
  createQuestion(
    """
    Parameters for CreateQuestion
    """
    input: CreateQuestionInput!
  ): CreateQuestionPayload

  """
  as a member, attach a resume to your profile
  """
  createResume(
    """
    Parameters for CreateResume
    """
    input: CreateResumeInput!
  ): CreateResumePayload
  createSignableDocuments(
    """
    Parameters for CreateSignableDocuments
    """
    input: CreateSignableDocumentsInput!
  ): CreateSignableDocumentsPayload
  createTimesheet(
    """
    Parameters for CreateTimesheet
    """
    input: CreateTimesheetInput!
  ): CreateTimesheetPayload

  """
  create a pending video
  """
  createVideo(
    """
    Parameters for CreateVideo
    """
    input: CreateVideoInput!
  ): CreateVideoPayload

  """
  creates a new webhook to send events related to the current user's firm originating from Flexhire to an external service
  """
  createWebhook(
    """
    Parameters for CreateWebhook
    """
    input: CreateWebhookInput!
  ): CreateWebhookPayload

  """
  deactivates a payout method
  """
  deactivatePayoutMethod(
    """
    Parameters for DeactivatePayoutMethod
    """
    input: DeactivatePayoutMethodInput!
  ): DeactivatePayoutMethodPayload
  deleteAnswer(
    """
    Parameters for DeleteAnswer
    """
    input: DeleteAnswerInput!
  ): DeleteAnswerPayload

  """
  deletes an API key for the current user
  """
  deleteApiKey(
    """
    Parameters for DeleteApiKey
    """
    input: DeleteApiKeyInput!
  ): DeleteApiKeyPayload
  deleteBlogPost(
    """
    Parameters for DeleteBlogPost
    """
    input: DeleteBlogPostInput!
  ): DeleteBlogPostPayload

  """
  rejects invitation or marks an expired contract as deleted
  """
  deleteContract(
    """
    Parameters for DeleteContract
    """
    input: DeleteContractInput!
  ): DeleteContractPayload

  """
  cancel a contract rate change scheduled for the future
  """
  deleteContractRate(
    """
    Parameters for DeleteContractRate
    """
    input: DeleteContractRateInput!
  ): DeleteContractRatePayload

  """
  deletes an existing payment method for the current user's firm
  """
  deletePaymentMethod(
    """
    Parameters for DeletePaymentMethod
    """
    input: DeletePaymentMethodInput!
  ): DeletePaymentMethodPayload @deprecated(reason: "Not supported yet. Disabled")

  """
  as a member, delete a code test submission
  """
  deleteProjectSubmission(
    """
    Parameters for DeleteProjectSubmission
    """
    input: DeleteProjectSubmissionInput!
  ): DeleteProjectSubmissionPayload
  deleteReference(
    """
    Parameters for DeleteReference
    """
    input: DeleteReferenceInput!
  ): DeleteReferencePayload
  deleteTimesheet(
    """
    Parameters for DeleteTimesheet
    """
    input: DeleteTimesheetInput!
  ): DeleteTimesheetPayload

  """
  deletes an account
  """
  deleteUser(
    """
    Parameters for DeleteUser
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """
  delete a video
  """
  deleteVideo(
    """
    Parameters for DeleteVideo
    """
    input: DeleteVideoInput!
  ): DeleteVideoPayload

  """
  deletes an existing webhook
  """
  deleteWebhook(
    """
    Parameters for DeleteWebhook
    """
    input: DeleteWebhookInput!
  ): DeleteWebhookPayload

  """
  terminate an active or paused contract
  """
  expireContract(
    """
    Parameters for ExpireContract
    """
    input: ExpireContractInput!
  ): ExpireContractPayload

  """
  generate and fetch stripe express dashboard login url
  """
  fetchStripeLoginUrl(
    """
    Parameters for FetchStripeLoginUrl
    """
    input: FetchStripeLoginUrlInput!
  ): FetchStripeLoginUrlPayload
  forgotPassword(
    """
    Parameters for ForgotPassword
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload

  """
  grants a one-time bonus for a contract
  """
  grantBonus(
    """
    Parameters for GrantBonus
    """
    input: GrantBonusInput!
  ): GrantBonusPayload
  inviteFriend(
    """
    Parameters for InviteFriend
    """
    input: InviteFriendInput!
  ): InviteFriendPayload

  """
  invoice the specified payroll items now, instead of waiting until the auto-schedule does it
  """
  invoicePayrollItems(
    """
    Parameters for InvoicePayrollItems
    """
    input: InvoicePayrollItemsInput!
  ): InvoicePayrollItemsPayload
  linkedinAccessToken(
    """
    Parameters for LinkedinAccessToken
    """
    input: LinkedinAccessTokenInput!
  ): LinkedinAccessTokenPayload
  login(
    """
    Parameters for Login
    """
    input: LoginInput!
  ): LoginPayload
  logout(
    """
    Parameters for Logout
    """
    input: LogoutInput!
  ): LogoutPayload

  """
  make an offer to an existing flexhire user or invite an off-platform person
  """
  makeOffer(
    """
    Parameters for MakeOffer
    """
    input: MakeOfferInput!
  ): MakeOfferPayload
  markChatThreadRead(
    """
    Parameters for MarkChatThreadRead
    """
    input: MarkChatThreadReadInput!
  ): MarkChatThreadReadPayload

  """
  become another user
  """
  masq(
    """
    Parameters for Masq
    """
    input: MasqInput!
  ): MasqPayload
  oauthLogin(
    """
    Parameters for OauthLogin
    """
    input: OauthLoginInput!
  ): OauthLoginPayload

  """
  pause an active contract
  """
  pauseContract(
    """
    Parameters for PauseContract
    """
    input: PauseContractInput!
  ): PauseContractPayload

  """
  query a submitted payroll item
  """
  queryPayrollItem(
    """
    Parameters for QueryPayrollItem
    """
    input: QueryPayrollItemInput!
  ): QueryPayrollItemPayload
  refreshPaymentStatus(
    """
    Parameters for RefreshPaymentStatus
    """
    input: RefreshPaymentStatusInput!
  ): RefreshPaymentStatusPayload
  refreshPayoutMethodRequirements(
    """
    Parameters for RefreshPayoutMethodRequirements
    """
    input: RefreshPayoutMethodRequirementsInput!
  ): RefreshPayoutMethodRequirementsPayload
  registerFrontendVersion(
    """
    Parameters for RegisterFrontendVersion
    """
    input: RegisterFrontendVersionInput!
  ): RegisterFrontendVersionPayload

  """
  rejects a contract as a member
  """
  rejectContract(
    """
    Parameters for RejectContract
    """
    input: RejectContractInput!
  ): RejectContractPayload

  """
  rejects contract requests
  """
  rejectContractRequests(
    """
    Parameters for RejectContractRequests
    """
    input: RejectContractRequestsInput!
  ): RejectContractRequestsPayload

  """
  rejects a freelancer on the hire pipeline, marking them as not suited to be hired for the job
  """
  rejectFreelancer(
    """
    Parameters for RejectFreelancer
    """
    input: RejectFreelancerInput!
  ): RejectFreelancerPayload
  rejectPayrollItem(
    """
    Parameters for RejectPayrollItem
    """
    input: RejectPayrollItemInput!
  ): RejectPayrollItemPayload
  removeSignableDocument(
    """
    Parameters for RemoveSignableDocument
    """
    input: RemoveSignableDocumentInput!
  ): RemoveSignableDocumentPayload @deprecated(reason: "experimental. Not working yet")

  """
  request an interview to an applicant
  """
  requestInterview(
    """
    Parameters for RequestInterview
    """
    input: RequestInterviewInput!
  ): RequestInterviewPayload
  requestReference(
    """
    Parameters for RequestReference
    """
    input: RequestReferenceInput!
  ): RequestReferencePayload

  """
  resends the invitation email for the given invitation contract
  """
  resendInvitationEmail(
    """
    Parameters for ResendInvitationEmail
    """
    input: ResendInvitationEmailInput!
  ): ResendInvitationEmailPayload
  resetPassword(
    """
    Parameters for ResetPassword
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload

  """
  resumes a paused contract
  """
  resumeContract(
    """
    Parameters for ResumeContract
    """
    input: ResumeContractInput!
  ): ResumeContractPayload

  """
  send a chat message. If sent without an account, the user is logged into a 'guest' type account automatically
  """
  sendChatMessage(
    """
    Parameters for SendChatMessage
    """
    input: SendChatMessageInput!
  ): SendChatMessagePayload
  sendConfirmationEmail(
    """
    Parameters for SendConfirmationEmail
    """
    input: SendConfirmationEmailInput!
  ): SendConfirmationEmailPayload

  """
  adds feedback for the client's team on a potential hire
  """
  sendContractRating(
    """
    Parameters for SendContractRating
    """
    input: SendContractRatingInput!
  ): SendContractRatingPayload

  """
  send questions or a code test to a potential hire
  """
  sendContractRequests(
    """
    Parameters for SendContractRequests
    """
    input: SendContractRequestsInput!
  ): SendContractRequestsPayload
  sendJobOpportunity(
    """
    Parameters for SendJobOpportunity
    """
    input: SendJobOpportunityInput!
  ): SendJobOpportunityPayload

  """
  as a member, set up a crypto wallet address to get paid
  """
  setupCryptoWallet(
    """
    Parameters for SetupCryptoWallet
    """
    input: SetupCryptoWalletInput!
  ): SetupCryptoWalletPayload
  setupPaymentMethod(
    """
    Parameters for SetupPaymentMethod
    """
    input: SetupPaymentMethodInput!
  ): SetupPaymentMethodPayload

  """
  as a member, set up a payoneer account to get paid
  """
  setupPayoneer(
    """
    Parameters for SetupPayoneer
    """
    input: SetupPayoneerInput!
  ): SetupPayoneerPayload

  """
  as a member, set up a stripe connect account to get paid
  """
  setupStripeConnectedAccount(
    """
    Parameters for SetupStripeConnectedAccount
    """
    input: SetupStripeConnectedAccountInput!
  ): SetupStripeConnectedAccountPayload

  """
  as a member, set up a Wise recipient to get paid
  """
  setupWise(
    """
    Parameters for SetupWise
    """
    input: SetupWiseInput!
  ): SetupWisePayload
  signup(
    """
    Parameters for Signup
    """
    input: SignupInput!
  ): SignupPayload

  """
  skip a suggested candidate for a job, to replace his slot with another candidate
  """
  skipCandidate(
    """
    Parameters for SkipCandidate
    """
    input: SkipCandidateInput!
  ): SkipCandidatePayload
  startApplication(
    """
    Parameters for StartApplication
    """
    input: StartApplicationInput!
  ): StartApplicationPayload
  submitApplication(
    """
    Parameters for SubmitApplication
    """
    input: SubmitApplicationInput!
  ): SubmitApplicationPayload
  submitPayoutMethodRequirements(
    """
    Parameters for SubmitPayoutMethodRequirements
    """
    input: SubmitPayoutMethodRequirementsInput!
  ): SubmitPayoutMethodRequirementsPayload
  submitPayrollItem(
    """
    Parameters for SubmitPayrollItem
    """
    input: SubmitPayrollItemInput!
  ): SubmitPayrollItemPayload
  submitProfile(
    """
    Parameters for SubmitProfile
    """
    input: SubmitProfileInput!
  ): SubmitProfilePayload
  submitVerification(
    """
    Parameters for SubmitVerification
    """
    input: SubmitVerificationInput!
  ): SubmitVerificationPayload

  """
  toggle bookmarked status for members on the hire pipeline
  """
  toggleBookmarkFreelancer(
    """
    Parameters for ToggleBookmarkFreelancer
    """
    input: ToggleBookmarkFreelancerInput!
  ): ToggleBookmarkFreelancerPayload
  twitterAccessToken(
    """
    Parameters for TwitterAccessToken
    """
    input: TwitterAccessTokenInput!
  ): TwitterAccessTokenPayload
  twitterRequestToken(
    """
    Parameters for TwitterRequestToken
    """
    input: TwitterRequestTokenInput!
  ): TwitterRequestTokenPayload

  """
  unapprove payroll item by its ID, before it is invoiced
  """
  unapprovePayrollItem(
    """
    Parameters for UnapprovePayrollItem
    """
    input: UnapprovePayrollItemInput!
  ): UnapprovePayrollItemPayload

  """
  undo any masq operations for this session
  """
  unmasq(
    """
    Parameters for Unmasq
    """
    input: UnmasqInput!
  ): UnmasqPayload

  """
  unsubscribe current user from email subscription
  """
  unsubscribe(
    """
    Parameters for Unsubscribe
    """
    input: UnsubscribeInput!
  ): UnsubscribePayload
  updateBlogPost(
    """
    Parameters for UpdateBlogPost
    """
    input: UpdateBlogPostInput!
  ): UpdateBlogPostPayload

  """
  update existing bonus data
  """
  updateBonus(
    """
    Parameters for UpdateBonus
    """
    input: UpdateBonusInput!
  ): UpdateBonusPayload
  updateChatThread(
    """
    Parameters for UpdateChatThread
    """
    input: UpdateChatThreadInput!
  ): UpdateChatThreadPayload

  """
  update a running contract
  """
  updateContract(
    """
    Parameters for UpdateContract
    """
    input: UpdateContractInput!
  ): UpdateContractPayload

  """
  change a contract rate change scheduled for the future
  """
  updateContractRate(
    """
    Parameters for UpdateContractRate
    """
    input: UpdateContractRateInput!
  ): UpdateContractRatePayload

  """
  update multiple contracts
  """
  updateContracts(
    """
    Parameters for UpdateContracts
    """
    input: UpdateContractsInput!
  ): UpdateContractsPayload
  updateEmailSubscription(
    """
    Parameters for UpdateEmailSubscription
    """
    input: UpdateEmailSubscriptionInput!
  ): UpdateEmailSubscriptionPayload

  """
  update a firm
  """
  updateFirm(
    """
    Parameters for UpdateFirm
    """
    input: UpdateFirmInput!
  ): UpdateFirmPayload

  """
  update details of a job
  """
  updateJobDetails(
    """
    Parameters for UpdateJobDetails
    """
    input: UpdateJobDetailsInput!
  ): UpdateJobDetailsPayload

  """
  update screening configuration for a job
  """
  updateJobScreening(
    """
    Parameters for UpdateJobScreening
    """
    input: UpdateJobScreeningInput!
  ): UpdateJobScreeningPayload

  """
  update sourcing configuration for a job
  """
  updateJobSourcing(
    """
    Parameters for UpdateJobSourcing
    """
    input: UpdateJobSourcingInput!
  ): UpdateJobSourcingPayload

  """
  as a member, submit or update a code test
  """
  updateProjectSubmission(
    """
    Parameters for UpdateProjectSubmission
    """
    input: UpdateProjectSubmissionInput!
  ): UpdateProjectSubmissionPayload
  updateSalary(
    """
    Parameters for UpdateSalary
    """
    input: UpdateSalaryInput!
  ): UpdateSalaryPayload
  updateTimesheet(
    """
    Parameters for UpdateTimesheet
    """
    input: UpdateTimesheetInput!
  ): UpdateTimesheetPayload
  updateUnsubscribedFromAllEmails(
    """
    Parameters for UpdateUnsubscribedFromAllEmails
    """
    input: UpdateUnsubscribedFromAllEmailsInput!
  ): UpdateUnsubscribedFromAllEmailsPayload

  """
  update a user
  """
  updateUser(
    """
    Parameters for UpdateUser
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  update settings of a video
  """
  updateVideo(
    """
    Parameters for UpdateVideo
    """
    input: UpdateVideoInput!
  ): UpdateVideoPayload
  updateWebhook(
    """
    Parameters for UpdateWebhook
    """
    input: UpdateWebhookInput!
  ): UpdateWebhookPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Autogenerated input type of OauthLogin
"""
input OauthLoginInput {
  accessToken: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  providerName: OauthProviderName!
}

"""
Autogenerated return type of OauthLogin.
"""
type OauthLoginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

enum OauthProviderName {
  """
  unsupported at the moment
  """
  github
  linkedin
}

"""
a key/value pair that acts as an option for a select field
"""
type Option {
  label: String!
  value: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
a key/value pair
"""
input PairInput {
  key: String!
  value: String
}

"""
Autogenerated input type of PauseContract
"""
input PauseContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of PauseContract.
"""
type PauseContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

type Paycheck implements Node {
  createdAt: DateTime
  id: ID!
  itemNum: Int
  paidOutAt: DateTime
  payrollItems: [PayrollItem!]
  status: PaycheckStatusEnum
  totalToPayFreelancer: Money
}

"""
The connection type for Paycheck.
"""
type PaycheckConnection {
  """
  A list of edges.
  """
  edges: [PaycheckEdge]

  """
  A list of nodes.
  """
  nodes: [Paycheck]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type PaycheckEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Paycheck
}

enum PaycheckStatusEnum {
  """
  payout to member failed
  """
  failed

  """
  payout to member successful
  """
  paid

  """
  payout to member is draft / not final
  """
  pending

  """
  payout to member is prepared
  """
  ready
}

input PaychecksFilters {
  status: PaycheckStatusEnum!
}

type PaymentMethod implements Node {
  achAccountNumber: String
  achRoutingNumber: String
  amountAvailable: Money
  bic: String
  cardholderName: String
  currency: Currency
  customerId: String
  default: Boolean!
  expMonth: Int
  expYear: Int
  firm: Firm
  iban: String
  id: ID!
  institutionName: String
  isManualTransfer: Boolean
  mask: String
  name: String
  paymentMethodType: PaymentMethodTypeLiteral
  rawId: Int
  swiftCode: String
  token: String
  user: User
}

enum PaymentMethodTypeLiteral {
  ach_credit_transfer
  bank_transfer
  card
  plaid_link
  sepa_debit
}

enum PaymentModeEnum {
  """
  work reports will have a rate and the salary is based on them
  """
  pay_work_reports

  """
  payroll is disabled (only use this for filtering)
  """
  payments_disabled

  """
  the salary is a fixed monthly amount
  """
  salary
}

type Payout implements Node {
  amount: Money
  bonus: Bonus
  contract: Contract
  createdAt: DateTime
  description: String
  id: ID!
  itemNum: Int
  paycheck: Paycheck
  status: PayoutStatusEnum
  timesheet: Timesheet
  userPaymentId: String
}

"""
The connection type for Payout.
"""
type PayoutConnection {
  """
  A list of edges.
  """
  edges: [PayoutEdge]

  """
  A list of nodes.
  """
  nodes: [Payout]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type PayoutEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Payout
}

type PayoutMethod implements Node {
  accountId: String

  """
  some payout methods have a specific currency associated to them
  """
  currency: Currency
  id: ID!
  isDefault: Boolean
  payoutMethodType: PayoutMethodTypeEnum!
  requirementGroups: [RequirementGroup!]
  setupUrl: String
  status: PayoutMethodStatusEnum!
}

enum PayoutMethodStatusEnum {
  active
  failed
  pending
}

enum PayoutMethodTypeEnum {
  aggregated
  crypto_wallet
  off_platform
  payoneer
  stripe_connect
  wise
}

enum PayoutMode {
  """
  automatic payouts happen on a fixed schedule regardless of client invoice payment
  """
  skip_waiting_for_invoice_payment

  """
  automatic payouts will happen after client invoice payment has completed
  """
  wait_for_invoice_payment
}

enum PayoutStatusEnum {
  failed
  pending
  processing
  successful
}

input PayoutsFilters {
  contractStatuses: [ContractStatus!]
  endDate: Date
  startDate: Date
  status: PayoutStatusEnum
}

type PayoutsStats {
  count: Int!
  currency: Currency!
  totalPaid: Money!
  totalPending: Money!
}

"""
income/cost summary for time period
"""
type PayrollBreakdown {
  breakdownItems: [PayrollBreakdownItem!]!
  freelancers: [User!]!
}

enum PayrollBreakdownGroupByEnum {
  day
  month
  week
}

"""
summarized income/cost for time period
"""
type PayrollBreakdownItem {
  date: Date!
  total: Money!
}

type PayrollItem implements Node {
  approvedAt: DateTime
  approver: User
  assumedClientPaymentCompletionAt: DateTime
  assumedClientPaymentInitiationAt: DateTime
  assumedInvoiceDate: DateTime
  assumedInvoiceDueDate: DateTime
  assumedPayoutCompletionAt: DateTime
  assumedPayoutDueDate: DateTime @deprecated(reason: "use assumedPayoutCompletionAt instead")
  assumedPayoutInitiationAt: DateTime
  autoApprove: Boolean
  autoApproved: Boolean
  bonus: Bonus
  clientComments: String
  clientStatus: PayrollItemClientStatus @deprecated(reason: "use pipelineStatus instead")
  contract: Contract
  contractRates(filters: ContractRatesFilters): [ContractRate!]
  currency: Currency
  endDate: Date
  expense: Expense
  firm: Firm
  freelancerStatus: PayrollItemFreelancerStatus @deprecated(reason: "use pipelineStatus instead")
  id: ID!
  invoice: Invoice
  invoiceItem: InvoiceItem
  itemNum: Int
  itemType: PayrollItemType
  itemTypeHumanized: String
  manageable: Boolean
  manuallyInvoiceable: Boolean
  paycheck: Paycheck
  pipelineStatus: PayrollItemPipelineStatus
  rawId: Int
  salary: Salary
  startDate: Date
  status: PayrollItemStatus
  submittedAt: DateTime
  timesheet: Timesheet
  totalToPayClient: Money
  totalToPayFreelancer: Money
  unapprovable: Boolean
}

enum PayrollItemClientStatus {
  """
  approved by the client
  """
  approved

  """
  queried by the client
  """
  client_query

  """
  invoiced to the customer
  """
  invoiced @deprecated(reason: "use pipelineStatus instead")

  """
  paid out to the freelancer
  """
  paid @deprecated(reason: "use pipelineStatus instead")

  """
  processing customer payment
  """
  payment_processing @deprecated(reason: "use pipelineStatus instead")

  """
  payout to the freelancer has failed
  """
  payout_failed @deprecated(reason: "use pipelineStatus instead")

  """
  not yet submitted
  """
  pending

  """
  submitted and waiting for manual approval
  """
  pending_approval @deprecated(reason: "use pipelineStatus instead")

  """
  rejected by the client
  """
  rejected

  """
  submitted, waiting for client approval or auto approval
  """
  submitted

  """
  submitted and waiting for auto approval
  """
  submitted_auto_approval @deprecated(reason: "use pipelineStatus instead")
}

"""
The connection type for PayrollItem.
"""
type PayrollItemConnection {
  """
  A list of edges.
  """
  edges: [PayrollItemEdge]

  """
  A list of nodes.
  """
  nodes: [PayrollItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type PayrollItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PayrollItem
}

enum PayrollItemFreelancerStatus {
  """
  approved by the client
  """
  approved

  """
  paid by the client, not paid to the freelancer yet
  """
  client_paid @deprecated(reason: "use pipelineStatus instead")

  """
  client has initiated payment, which has not completed yet
  """
  client_payment_processing @deprecated(reason: "use pipelineStatus instead")

  """
  queried by the client
  """
  client_query

  """
  the timesheet has been invoiced, but the client has not initiated payment yet
  """
  invoiced @deprecated(reason: "use pipelineStatus instead")

  """
  paid out to the freelancer
  """
  paid @deprecated(reason: "use pipelineStatus instead")

  """
  payout to the freelancer has failed
  """
  payout_failed @deprecated(reason: "use pipelineStatus instead")

  """
  not yet submitted
  """
  pending

  """
  rejected by the client
  """
  rejected

  """
  submitted, waiting for client approval or auto approval
  """
  submitted
}

enum PayrollItemPipelineStatus {
  """
  approved by the client
  """
  approved

  """
  processing payment from the customer to Flexhire
  """
  client_payment_processing

  """
  queried by the client
  """
  client_query

  """
  invoiced to the customer
  """
  invoiced

  """
  processing payment from Flexhire to the member
  """
  member_payment_processing

  """
  paid out to the member
  """
  paid_out

  """
  payout to the member has failed
  """
  payout_failed

  """
  not yet submitted
  """
  pending

  """
  rejected by the client
  """
  rejected

  """
  submitted, waiting for client approval or auto approval
  """
  submitted
}

enum PayrollItemStatus {
  """
  approved by the client
  """
  approved

  """
  queried by the client
  """
  client_query

  """
  not yet submitted
  """
  pending

  """
  rejected by the client
  """
  rejected

  """
  submitted, waiting for client approval or auto approval
  """
  submitted
}

enum PayrollItemType {
  """
  contains one bonus
  """
  bonus

  """
  contains one expense
  """
  expense

  """
  contains a periodic fixed salary
  """
  salary

  """
  contains one timesheet (work report)
  """
  timesheet
}

input PayrollItemsFilters {
  approvalType: ApprovalTypeEnum
  clientId: ID
  clientStatus: PayrollItemClientStatus @deprecated(reason: "use pipelineStatus instead")
  endDate: Date
  freelancerStatus: PayrollItemFreelancerStatus @deprecated(reason: "use pipelineStatus instead")
  invoiceNum: Int
  name: String
  pipelineStatus: PayrollItemPipelineStatus
  startDate: Date
  status: PayrollItemStatus
  type: PayrollItemType
}

type PayrollStats {
  currency: Currency!
  totalPaid: Money!
  totalPending: Money!
  totalTimePaidInMinutes: Float!
}

enum Position {
  """
  for freelance jobs, usually paid hourly
  """
  freelancer

  """
  for permanent jobs, usually paid with a fixed salary
  """
  permanent
}

type Profile implements Node {
  addressRecipient: String
  allowScreening: Boolean
  availability: ProfileAvailabilityEnum
  availabilityType: [ProfileAvailabilityTypeLiteral!]
  availableAt: DateTime
  canWorkInTheUs: Boolean
  city: String
  cityRecipient: String
  clientRate: Money

  """
  ISO 3166-1 alpha-2 code, lowercase
  """
  country: String
  countryRecipient: String
  createdAt: DateTime
  currency: Currency
  freelancerRate: Money
  freelancerSubtypes: [FreelancerSubtype!]
  freelancerType: FreelancerType
  fullAddress: String
  id: ID!
  jobTypes: [JobType!]!
  lastMessagedAt: DateTime
  locationBounds0: Float
  locationBounds1: Float
  locationBounds2: Float
  locationBounds3: Float
  locationBounds4: Float
  locationLatitude: Float
  locationLongitude: Float
  managedTeamSize: String
  openToOpportunities: Boolean
  rateMode: RateMode
  rawId: Int
  region: String
  screeningFeedback: String
  screeningRequiresProject: Boolean
  slug: String
  stateRecipient: String
  taxFirm: String
  taxId: String
  textIntroduction: String
  totalExperience: Int
  updatedAt: DateTime
  urlBlog: String
  urlDribbble: String
  urlGithub: String
  urlLinkedin: String
  usCitizen: Boolean
  visibility: ProfileVisibilityEnum
  zip: String
}

input ProfileAttributes {
  addressRecipient: String
  availability: ProfileAvailabilityEnum
  availabilityType: [String!]
  availableAt: Date
  canWorkInTheUs: Boolean
  cityRecipient: String
  countryRecipient: String
  currency: String
  freelancerRate: Float
  freelancerTypeId: Int
  jobTypes: [String!]
  locationBounds0: Float
  locationBounds1: Float
  locationBounds2: Float
  locationBounds3: Float
  locationLatitude: Float
  locationLongitude: Float
  managedTeamSize: String
  openToOpportunities: Boolean
  rateMode: RateMode
  stateRecipient: String
  taxFirm: String
  taxId: String
  textIntroduction: String
  totalExperience: Int
  urlBlog: String
  urlDribbble: String
  urlGithub: String
  urlLinkedin: String
  usCitizen: Boolean
  visibility: ProfileVisibilityEnum
  zip: String
}

enum ProfileAvailabilityEnum {
  available_now
  available_soon
  not_available
}

enum ProfileAvailabilityTypeLiteral {
  full_time
  part_time
}

enum ProfileVisibilityEnum {
  visibility_clients
  visibility_private
  visibility_public
}

type Project implements Node {
  custom: Boolean
  description: String
  id: ID!
  rawId: Int
  screening: Boolean
  status: String
  submission: ProjectSubmission
  title: String
}

input ProjectAttributes {
  description: String
  rawId: Int
  title: String
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

type ProjectSubmission implements Node {
  contractRequests: [ContractRequest!]
  description: String
  id: ID!
  project: Project
  rawId: Int
  screenshotUrl: String
  status: ProjectSubmissionStatusEnum
  url: String
}

enum ProjectSubmissionStatusEnum {
  private
  public
}

"""
Flexhire API - refer to https://flexhire.com/developer for more information
"""
type Query {
  """
  show all available billing plans
  """
  billingPlans: [BillingPlan!]
  blogCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogCategoryConnection
  blogCategory(slug: String!): BlogCategory
  blogPost(slug: String!): BlogPost
  blogPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogPostConnection
  blogSubcategory(slug: String!): BlogCategory
  chatThread(rawId: Int, userRawId: Int): ChatThread @deprecated(reason: "only used in legacy frontend code")

  """
  configuration values for the frontend. User specific
  """
  configuration: Configuration

  """
  load a contract: use either id, rawId, a combination of jobSlug and freelancerSlug, or freelancerEmail
  """
  contract(
    """
    can be used as an alternative to others to load invitations not yet accepted
    """
    freelancerEmail: String

    """
    to be used in combination with jobSlug
    """
    freelancerSlug: String

    """
    for loading the contracy by id
    """
    id: ID

    """
    to be used in combination with freelancerSlug
    """
    jobSlug: String

    """
    for loading the contracy by raw id
    """
    rawId: Int
  ): Contract

  """
  preview changes resulting from updating a contract for active/paused contracts
  and offer made contracts. Most useful for previewing rate changes
  """
  contractPreview(input: ContractPreviewAttributes!): ContractPreview

  """
  all contracts visible by the current user will be included
  """
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection!
  costBreakdown(
    """
    filter by manager
    """
    clientId: ID

    """
    filter by employee or contractor
    """
    freelancerId: ID
    groupBy: PayrollBreakdownGroupByEnum!
  ): PayrollBreakdown
  currencies(
    """
    only include currencies that can be used for contracts
    """
    allowContracts: Boolean

    """
    only include currencies that can be used for invoice creation
    """
    allowInvoices: Boolean
  ): [Currency!]

  """
  resolves to the currently logged in user
  """
  currentUser: User

  """
  get email subscriptions for a logged out user using an unsubscribe token
  """
  emailSubscriptions(token: String!): [EmailSubscription!]
  featuredFreelancers: [User!]
  featuredQuestionsCategories: [QuestionCategory!]
  firm(slug: String): Firm

  """
  all firms visible by the current user will be included
  """
  firms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FirmConnection!
  freelancerSubtype(rawIdOrSlug: String): FreelancerSubtype @deprecated(reason: "only used for legacy Frontend code")

  """
  shows all freelancer subtypes (specializations) on the platform
  """
  freelancerSubtypes: [FreelancerSubtype!]
  freelancerType(id: ID, rawId: Int @deprecated(reason: "only used for legacy Frontend code"), rawIdOrSlug: String @deprecated(reason: "only used for legacy Frontend code")): FreelancerType

  """
  shows all freelancer types (industries) on the platform
  """
  freelancerTypes: [FreelancerType!]
  institutes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
  ): InstituteConnection
  invoice(rawId: Int @deprecated(reason: "only used in legacy frontend code"), token: String): Invoice
  job(
    """
    load job by raw id
    """
    rawId: Int
    ref: String
    referrer: String

    """
    load job by slug
    """
    slug: String
  ): JobView

  """
  list of possible integrations for jobs on Flexhire
  """
  jobIntegrationProviders: [JobIntegrationProvider!]

  """
  all jobs visible by the current user will be included
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    filter by firm using the firm's slug
    """
    firmSlug: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String

    """
    filter by job status
    """
    status: JobStatus

    """
    filter by job owner
    """
    userId: ID
    userRawId: Int
  ): JobConnection @deprecated(reason: "use firm.jobs or user.jobs")

  """
  load a Link's data using its token. Note that if the link has auto-login, you
  will need to use the autoLoginWithLink mutation to do it
  """
  link(token: String!): Link

  """
  list all members of the platform. Only used in backoffice tools
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: MembersFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node!]

  """
  optionally load a node. if null is passed, null will be returned
  """
  optionalNode(id: ID): Node

  """
  all code tests visible to the current user
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    if true, limit results to projects suitable for Flexhire pre-screening
    """
    screening: Boolean
  ): ProjectConnection
  publicChatContacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): UserConnection
  questionCategory(
    """
    slug for the category
    """
    slug: String!
  ): QuestionCategory
  questions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: QuestionsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): QuestionConnection
  reference(token: String!): Reference

  """
  warning: experimental. Can be used to load a resource by slug. Could be a User, Firm or Job
  """
  resource(ref: String, referrer: String, slug: String!, subslug: String, token: String): Resource
  salaryPreview(input: SalaryPreviewAttributes!): SalaryPreview
  skill(slug: String): Skill @deprecated(reason: "only used in legacy frontend code")

  """
  all selectable/usable skills on the platform
  """
  skills(
    """
    if true, only return featured skills
    """
    featured: Boolean
    freelancerTypeRawId: Int @deprecated(reason: "only used in legacy frontend code")
  ): [Skill!]
  timesheet(rawId: Int): Timesheet @deprecated(reason: "only used by legacy frontend code")

  """
  check if a user is unsubscribed from all emails using an unsubscribe token
  """
  unsubscribedFromAllEmails(token: String!): Boolean
  urlValidity(url: String!): ValidationResult

  """
  load user on the platform. Must be visible to the current user
  """
  user(
    """
    load user by id
    """
    id: ID

    """
    load user by raw id
    """
    rawId: Int

    """
    load member by profile slug
    """
    slug: String
  ): User

  """
  admin only field to search across all users
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): UserConnection
  video(rawId: Int): Video @deprecated(reason: "only used by legacy frontend code")
}

"""
Autogenerated input type of QueryPayrollItem
"""
input QueryPayrollItemInput {
  clientComments: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemId: ID!
}

"""
Autogenerated return type of QueryPayrollItem.
"""
type QueryPayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItem: PayrollItem
}

type Question implements Node {
  answersCount: Int
  description: String
  freelancerSubtypes: [FreelancerSubtype!]
  freelancerTypes: [FreelancerType!]
  id: ID!
  jobsCount: Int
  maxDuration: Int
  rawId: Int
  skills: [Skill!]
  status: QuestionStatusEnum
  tags: [Tag!]

  """
  the textual answer submitted by the current user, if any
  """
  textualAnswer: Answer
  title: String

  """
  the video answer submitted by the current user, if any
  """
  videoAnswer: Answer
}

input QuestionAttributes {
  description: String
  maxDuration: Int
  rawId: Int
  status: String
  title: String!
}

"""
a category for featured questions
"""
union QuestionCategory = FreelancerSubtype | FreelancerType | Skill | Tag

"""
The connection type for Question.
"""
type QuestionConnection {
  """
  A list of edges.
  """
  edges: [QuestionEdge]

  """
  A list of nodes.
  """
  nodes: [Question]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type QuestionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Question
}

enum QuestionStatusEnum {
  private
  public
  submitted
}

input QuestionsFilters {
  """
  if true, only return featured questions
  """
  featured: Boolean
  freelancerSubtypeRawIds: [Int!] @deprecated(reason: "only used in legacy frontend code")
  freelancerTypeRawIds: [Int!] @deprecated(reason: "only used in legacy frontend code")
  page: Int @deprecated(reason: "only used in legacy frontend code")
  perPage: Int @deprecated(reason: "only used in legacy frontend code")
  skillRawIds: [Int!] @deprecated(reason: "only used in legacy frontend code")

  """
  search by title
  """
  title: String
}

enum RateMode {
  day
  hour
  month
  week
  year
}

union Recipient = ChatBot | User

type Reference implements Node {
  comments: String
  createdAt: DateTime
  email: String
  id: ID!
  name: String
  otherRelation: String
  ratingExpert: Int
  ratingOverall: Int
  ratingProfessional: Int
  rawId: Int @deprecated(reason: "only used in legacy frontend code")
  relation: ReferenceRelationEnum
  status: ReferenceStatusEnum
  updatedAt: DateTime
  user: User
}

enum ReferenceRelationEnum {
  classmate
  client
  coworker
  friend
  other
}

enum ReferenceStatusEnum {
  completed
  pending
}

type Referral implements Node {
  id: ID!
  job: Job
  token: String
  type: String
}

"""
Autogenerated input type of RefreshPaymentStatus
"""
input RefreshPaymentStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentIntentId: String!
}

"""
Autogenerated return type of RefreshPaymentStatus.
"""
type RefreshPaymentStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  invoice: Invoice
}

"""
Autogenerated input type of RefreshPayoutMethodRequirements
"""
input RefreshPayoutMethodRequirementsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
  requirementValues: [PairInput!]!
  type: String!
}

"""
Autogenerated return type of RefreshPayoutMethodRequirements.
"""
type RefreshPayoutMethodRequirementsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  requirementGroups: [RequirementGroup!]
}

"""
Autogenerated input type of RegisterFrontendVersion
"""
input RegisterFrontendVersionInput {
  buildId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  key: String!
}

"""
Autogenerated return type of RegisterFrontendVersion.
"""
type RegisterFrontendVersionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of RejectContract
"""
input RejectContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  contractRawId: Int @deprecated(reason: "only used to support some legacy frontend code")
  freelancerFeedback: String
}

"""
Autogenerated return type of RejectContract.
"""
type RejectContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of RejectContractRequests
"""
input RejectContractRequestsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  contractRawId: Int @deprecated(reason: "only used to support some legacy frontend code")
  freelancerFeedback: String
}

"""
Autogenerated return type of RejectContractRequests.
"""
type RejectContractRequestsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of RejectFreelancer
"""
input RejectFreelancerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRejectionComments: String
  clientRejectionMessage: String
  clientRejectionReason: String
  contractId: ID!
}

"""
Autogenerated return type of RejectFreelancer.
"""
type RejectFreelancerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of RejectPayrollItem
"""
input RejectPayrollItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemId: ID!
}

"""
Autogenerated return type of RejectPayrollItem.
"""
type RejectPayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItem: PayrollItem
}

"""
Autogenerated input type of RemoveSignableDocument
"""
input RemoveSignableDocumentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signableDocumentId: ID!
}

"""
Autogenerated return type of RemoveSignableDocument.
"""
type RemoveSignableDocumentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  signableDocument: SignableDocument
}

"""
Autogenerated input type of RequestInterview
"""
input RequestInterviewInput {
  calendlyUrl: String
  clientAgreesTerms: Boolean!
  clientId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  interviewDate1: DateTime
  interviewDate2: DateTime
  interviewDate3: DateTime
  interviewNote: String
  interviewSchedulingMethod: String!
}

"""
Autogenerated return type of RequestInterview.
"""
type RequestInterviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of RequestReference
"""
input RequestReferenceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  message: String
  name: String!
}

"""
Autogenerated return type of RequestReference.
"""
type RequestReferencePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  reference: Reference
}

"""
a required field to fill in
"""
type Requirement {
  defaultValue: String
  example: String

  """
  unique key/identifier of this field
  """
  key: String!
  maxLength: Int
  minLength: Int
  name: String!
  options: [Option!]
  refreshOnChange: Boolean!
  required: Boolean!
  type: RequirementTypeEnum!
  validationAsync: String
  validationRegexp: String
}

"""
a section of required fields to fill in
"""
type RequirementGroup {
  description: String!
  requirements: [Requirement!]!
  title: String!
  type: String!
}

enum RequirementTypeEnum {
  date
  radio
  select
  text
}

"""
Autogenerated input type of ResendInvitationEmail
"""
input ResendInvitationEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of ResendInvitationEmail.
"""
type ResendInvitationEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of ResetPassword
"""
input ResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  handOff: Boolean
  password: String!
  passwordConfirmation: String!
  token: String!
}

"""
Autogenerated return type of ResetPassword.
"""
type ResetPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

union Resource = Firm | Job | User

type Resume implements Node {
  """
  true if the resume is to be imported to the associated user's profile
  """
  copyToProfile: Boolean
  filename: String
  id: ID!
  importTimedOut: Boolean @deprecated(reason: "use importTimeoutAt instead")
  importTimeoutAt: DateTime
  mimetype: String
  status: ResumeStatusEnum

  """
  true if the import has been completed and the result is deemed positive
  """
  success: Boolean
  url: String
  user: User
}

"""
Autogenerated input type of ResumeContract
"""
input ResumeContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of ResumeContract.
"""
type ResumeContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated return type of ResumeProcessingFinished.
"""
type ResumeProcessingFinishedPayload {
  resume: Resume
}

enum ResumeStatusEnum {
  processed
  processing
  processing_failed
  processing_queued
  unprocessed
}

input SalariesFilters {
  amount: Int
  approvalType: ApprovalTypeEnum
  clientId: ID
  clientStatus: PayrollItemClientStatus @deprecated(reason: "use pipelineStatus instead")
  contractStatuses: [ContractStatus!]
  date: Date
  endDate: Date
  freelancerStatus: PayrollItemFreelancerStatus @deprecated(reason: "use pipelineStatus instead")
  invoiceNum: Int
  name: String
  pipelineStatus: PayrollItemPipelineStatus
  startDate: Date
  status: PayrollItemStatus
}

type Salary implements Node {
  contract: Contract
  currency: Currency
  customAmount: Boolean
  daysOff: [Date!]
  editDescription: String
  endDate: Date
  id: ID!
  payrollItem: PayrollItem
  startDate: Date
  totalToPayClient: Money
  totalToPayFreelancer: Money
  workedDays: [Date!]
  workingDays: [Date!]
}

"""
The connection type for Salary.
"""
type SalaryConnection {
  """
  A list of edges.
  """
  edges: [SalaryEdge]

  """
  A list of nodes.
  """
  nodes: [Salary]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type SalaryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Salary
}

type SalaryPreview {
  daysOff: [Date!]
  totalToPayClient: Money
  totalToPayFreelancer: Money
}

input SalaryPreviewAttributes {
  customAmount: Boolean!
  daysOff: [Date!]!
  salaryId: ID!
  totalToPayClient: Float
  totalToPayFreelancer: Float
}

"""
Autogenerated return type of SeenOnline.
"""
type SeenOnlinePayload {
  user: User
}

"""
Autogenerated input type of SendChatMessage
"""
input SendChatMessageInput {
  chatBotId: ID
  chatThreadId: ID
  chatThreadRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String!
  recipientId: ID
  recipientRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of SendChatMessage.
"""
type SendChatMessagePayload {
  chatMessage: ChatMessage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of SendConfirmationEmail
"""
input SendConfirmationEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SendConfirmationEmail.
"""
type SendConfirmationEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of SendContractRating
"""
input SendContractRatingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  description: String!
  ratingPositive: Boolean!
  status: String!
}

"""
Autogenerated return type of SendContractRating.
"""
type SendContractRatingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractFeedback: ContractFeedback
  errors: [Error!]
}

"""
Autogenerated input type of SendContractRequests
"""
input SendContractRequestsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  messageTemplate: String
  projectDescription: String
  projectId: Int
  projectTitle: String
  questionsIds: [Int!]
  questionsTitles: [String!]
  videoIntroduction: Boolean
}

"""
Autogenerated return type of SendContractRequests.
"""
type SendContractRequestsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of SendJobOpportunity
"""
input SendJobOpportunityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerRawIdOrSlug: String @deprecated(reason: "only used in legacy frontend code")
  jobId: ID
  userId: ID
}

"""
Autogenerated return type of SendJobOpportunity.
"""
type SendJobOpportunityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of SetupCryptoWallet
"""
input SetupCryptoWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  walletAddress: String
}

"""
Autogenerated return type of SetupCryptoWallet.
"""
type SetupCryptoWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SetupPaymentMethod
"""
input SetupPaymentMethodInput {
  callbackUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentMethodType: PaymentMethodTypeLiteral!
}

"""
Autogenerated return type of SetupPaymentMethod.
"""
type SetupPaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  sessionId: String
}

"""
Autogenerated input type of SetupPayoneer
"""
input SetupPayoneerInput {
  alreadyHaveAnAccount: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetupPayoneer.
"""
type SetupPayoneerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  message: String @deprecated(reason: "unused")
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SetupStripeConnectedAccount
"""
input SetupStripeConnectedAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetupStripeConnectedAccount.
"""
type SetupStripeConnectedAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SetupWise
"""
input SetupWiseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  optionally pass this to load parameters such as the currency from it
  """
  contractId: ID

  """
  optionally explicitly specify the currency that the funds will be sent in
  """
  currency: String
}

"""
Autogenerated return type of SetupWise.
"""
type SetupWisePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  payoutMethod: PayoutMethod
}

type SignableDocument implements Node {
  contracts: [Contract!]
  id: ID!
  signatures: [Signature!]
  title: String!
  url: String!
  user: User
}

"""
a document file attached to a contract
"""
input SignableDocumentAttributes {
  title: String!
  url: String!
}

type Signature implements Node {
  documentUrl: String
  embedSignUrl: String
  id: ID!
  name: String
  signableDocument: SignableDocument
  signatureRequestId: String
  status: SignatureStatusEnum!
  user: User
}

enum SignatureStatusEnum {
  declined
  pending
  requested
  signed
}

"""
Autogenerated input type of Signup
"""
input SignupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if passed, a new firm with this name will be created and the user will be set as owner
  """
  companyName: String
  description: String
  email: String!
  firstName: String!
  jobSlug: String
  lastName: String!
  logoUrl: String
  password: String!
  passwordConfirmation: String!
  phone: String
  recaptchaToken: String
  ref: String
  referer: String
  refererUrl: String
  remember: Boolean
  resumeUrl: String
  termsOfServiceApproved: Boolean
  website: String
}

"""
Autogenerated return type of Signup.
"""
type SignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

type Skill implements Node {
  """
  true if the skill is user created and not made fully public yet
  """
  custom: Boolean

  """
  if this skill was user created, this is the user that created it
  """
  customUser: User
  featuredFreelancerTypes: [FreelancerType!]
  featuredFreelancers: [User!]
  featuredQuestions: [Question!]
  freelancerTypes: [FreelancerType!]
  id: ID!
  name: String
  rawId: Int
  slug: String
}

input SkillFilter {
  groupIndex: Int
  id: Int!
  name: String
  requiredYears: Int
}

"""
Autogenerated input type of SkipCandidate
"""
input SkipCandidateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comments: String
  freelancerId: ID!
  jobId: ID!
  reason: String
  system: Boolean
}

"""
Autogenerated return type of SkipCandidate.
"""
type SkipCandidatePayload {
  candidate: Candidate!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

enum SortOrder {
  """
  sort ascending (default)
  """
  asc

  """
  sort descending
  """
  desc
}

"""
Autogenerated input type of StartApplication
"""
input StartApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of StartApplication.
"""
type StartApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

type StripeCharge implements Node {
  id: ID!
  invoice: Invoice
  paymentMethod: PaymentMethod
  status: StripeChargeStatusEnum!
  user: User
}

enum StripeChargeStatusEnum {
  failed
  paid
  pending
  processing
}

"""
Autogenerated input type of SubmitApplication
"""
input SubmitApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitApplication.
"""
type SubmitApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of SubmitPayoutMethodRequirements
"""
input SubmitPayoutMethodRequirementsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
  requirementValues: [PairInput!]!

  """
  the type of the requirement group being submitted
  """
  type: String!
}

"""
Autogenerated return type of SubmitPayoutMethodRequirements.
"""
type SubmitPayoutMethodRequirementsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SubmitPayrollItem
"""
input SubmitPayrollItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemId: ID
}

"""
Autogenerated return type of SubmitPayrollItem.
"""
type SubmitPayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItem: PayrollItem
}

"""
Autogenerated input type of SubmitProfile
"""
input SubmitProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitProfile.
"""
type SubmitProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of SubmitVerification
"""
input SubmitVerificationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitVerification.
"""
type SubmitVerificationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

type Subscription {
  chatMessageReceived(userId: ID): ChatMessageReceivedPayload!
  chatThreadUpdated(chatThreadId: ID): ChatThreadUpdatedPayload!
  contractUpdated(contractId: ID!): ContractUpdatedPayload!
  firmUpdated(firmId: ID): FirmUpdatedPayload!
  frontendVersionDeployed: FrontendVersionDeployedPayload!
  invoiceUpdated(invoiceId: ID): InvoiceUpdatedPayload!
  resumeProcessingFinished(userId: ID, userRawId: Int @deprecated(reason: "only used in legacy frontend code")): ResumeProcessingFinishedPayload!
  seenOnline(userId: ID, userRawId: Int @deprecated(reason: "only used in legacy frontend code")): SeenOnlinePayload!
  userUpdated(userId: ID): UserUpdatedPayload!
  videoUpdated(videoId: ID, videoRawId: Int @deprecated(reason: "only used in legacy frontend code")): VideoUpdatedPayload!
}

"""
identifies which type of email subscription it is and what kind of emails will be received if it's active
"""
enum SubscriptionName {
  """
  includes reminder emails about completing the profile
  """
  freelancer_incomplete

  """
  emails the user when a matching opened job is found
  """
  job_opportunity

  """
  emails the user when a job matching their industry and location is found, so they can refer people and win a prize
  """
  referral_opportunity

  """
  emails the user periodically if they have an active contract with timesheets, to remind them to submit them
  """
  timesheet_reminders
}

type Tag implements Node {
  featuredQuestions: [Question!]
  id: ID!
  name: String
  rawId: Int
  slug: String
}

input TagFilter {
  id: Int!
}

type TimelineEntry implements Node {
  """
  dateEnd set to null means the entry is active
  """
  dateEnd: Date
  dateStart: Date
  description: String
  entryType: TimelineEntryTypeEnum
  id: ID!

  """
  institute that this record is associated with
  """
  institute: Institute
  place: String
  rawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  these are the skills that are associated with this entry
  """
  skills: [Skill!]
  title: String
}

input TimelineEntryAttributes {
  dateEnd: Date
  dateStart: Date
  description: String
  entryType: TimelineEntryTypeEnum
  id: ID
  instituteId: ID
  place: String
  skillsRawIds: [Int!]
  title: String
}

enum TimelineEntryTypeEnum {
  education
  work
}

type Timesheet implements Node {
  clientRatingFeedbackContinue: String
  clientRatingFeedbackStart: String
  clientRatingFeedbackStop: String
  clientRatingScore: Int
  contract: Contract
  createdAt: DateTime
  currency: Currency
  editable: Boolean
  endDate: Date
  expenses: [Expense!]
  id: ID!
  invoice: Invoice
  payrollItem: PayrollItem
  projectCodes: [String!]
  rawId: Int
  startDate: Date
  timesheetEntries: [TimesheetEntry!]
  totalCapitalExpenditure: Money
  totalExpenses: Money
  totalHours: Int
  totalMinutes: Int
  totalOperatingExpenditure: Money
  totalToPayClient: Money
  totalToPayFreelancer: Money
  totalUnassignedExpenditure: Money
}

"""
The connection type for Timesheet.
"""
type TimesheetConnection {
  """
  A list of edges.
  """
  edges: [TimesheetEdge]

  """
  A list of nodes.
  """
  nodes: [Timesheet]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type TimesheetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Timesheet
}

type TimesheetEntry implements Node {
  currency: Currency
  description: String
  endTime: DateTime
  expenseType: ExpenseTypeEnum
  hourlyClientRate: Money
  hourlyFreelancerRate: Money
  id: ID!
  projectCode: String
  rawId: Int
  startTime: DateTime
  timesheet: Timesheet
  totalToPayClient: Money
  totalToPayFreelancer: Money
}

input TimesheetEntryAttributes {
  description: String
  endTime: DateTime
  expenseType: ExpenseTypeEnum
  projectCode: String
  startTime: DateTime
}

input TimesheetsFilters {
  approvalType: ApprovalTypeEnum
  clientId: ID
  clientRawId: Int @deprecated(reason: "used only by legacy frontend code")
  clientStatus: PayrollItemClientStatus @deprecated(reason: "use pipelineStatus instead")
  contractStatuses: [ContractStatus!]
  freelancerStatus: PayrollItemFreelancerStatus @deprecated(reason: "use pipelineStatus instead")
  fromDate: Date
  invoiceNum: Int
  name: String
  notInvoiced: Boolean
  order: SortOrder
  pipelineStatus: PayrollItemPipelineStatus
  sortBy: String
  status: PayrollItemStatus
  tags: [TagFilter!]
  toDate: Date
}

"""
Autogenerated input type of ToggleBookmarkFreelancer
"""
input ToggleBookmarkFreelancerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of ToggleBookmarkFreelancer.
"""
type ToggleBookmarkFreelancerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of TwitterAccessToken
"""
input TwitterAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  oauthVerifier: String
  requestToken: String
}

"""
Autogenerated return type of TwitterAccessToken.
"""
type TwitterAccessTokenPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of TwitterRequestToken
"""
input TwitterRequestTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of TwitterRequestToken.
"""
type TwitterRequestTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  requestToken: String
}

"""
Autogenerated input type of UnapprovePayrollItem
"""
input UnapprovePayrollItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemId: ID!
}

"""
Autogenerated return type of UnapprovePayrollItem.
"""
type UnapprovePayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItem: PayrollItem
}

"""
Autogenerated input type of Unmasq
"""
input UnmasqInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of Unmasq.
"""
type UnmasqPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of Unsubscribe
"""
input UnsubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailSubscriptionId: ID

  """
  unsubscribe token to identify the subscription
  """
  token: String
}

"""
Autogenerated return type of Unsubscribe.
"""
type UnsubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailSubscription: EmailSubscription
  errors: [Error!]
  unsubscribedFromAllEmails: Boolean
}

"""
Autogenerated input type of UpdateBlogPost
"""
input UpdateBlogPostInput {
  blogCategoryId: ID
  blogCategoryRawId: Int @deprecated(reason: "only used in legacy frontend code")
  blogPostId: ID
  blogPostRawId: Int @deprecated(reason: "only used in legacy frontend code")
  blogSubcategoryId: ID
  blogSubcategoryRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String
  excerpt: String
  published: Boolean
  title: String

  """
  use null to remove the video attached to the blog post
  """
  videoId: ID

  """
  use 0 to remove the video attached to the blog post
  """
  videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of UpdateBlogPost.
"""
type UpdateBlogPostPayload {
  blogPost: BlogPost

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of UpdateBonus
"""
input UpdateBonusInput {
  autoApprove: Boolean
  bonusId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  endDate: Date
  startDate: Date
  totalToPayClient: MoneyInput!
}

"""
Autogenerated return type of UpdateBonus.
"""
type UpdateBonusPayload {
  bonus: Bonus

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of UpdateChatThread
"""
input UpdateChatThreadInput {
  avatarUrl: String
  chatThreadId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  enableMeetingRoom: Boolean
  title: String
  userIds: [ID!]
}

"""
Autogenerated return type of UpdateChatThread.
"""
type UpdateChatThreadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of UpdateContract
"""
input UpdateContractInput {
  allowHireAccess: Boolean
  allowManageAccess: Boolean
  bonusClientRate: MoneyInput
  bonusPeriod: ContractBonusPeriod
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: MoneyInput
  contractId: ID!
  currency: String
  enableTimesheets: Boolean
  endDate: Date
  hidden: Boolean
  inheritorId: ID
  invoiceRecipientId: ID
  isFirmAdmin: Boolean
  paymentMode: PaymentModeEnum
  paymentsEnabled: Boolean
  purchaseOrderNumber: String
  rateMode: RateMode
  requireApprovalForPayments: Boolean
  startDate: Date
  status: ContractStatus
  tags: [String!]
}

"""
Autogenerated return type of UpdateContract.
"""
type UpdateContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of UpdateContractRate
"""
input UpdateContractRateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: MoneyInput
  contractRateId: ID!
  rateMode: RateMode
  startedAt: Date
}

"""
Autogenerated return type of UpdateContractRate.
"""
type UpdateContractRatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractRate: ContractRate
  errors: [Error!]
}

"""
Autogenerated input type of UpdateContracts
"""
input UpdateContractsInput {
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRawId: Int @deprecated(reason: "only used for legacy frontend code")
  contractIds: [ID!]
  contractRawIds: [Int!] @deprecated(reason: "only used for legacy frontend code")
  endDate: Date
  status: ContractStatus
}

"""
Autogenerated return type of UpdateContracts.
"""
type UpdateContractsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contracts: [Contract!]
  errors: [Error!]
  totalCount: Int
}

"""
Autogenerated input type of UpdateEmailSubscription
"""
input UpdateEmailSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  token: String

  """
  true if the user wishes to enable this subscription
  """
  userEnabled: Boolean
}

"""
Autogenerated return type of UpdateEmailSubscription.
"""
type UpdateEmailSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailSubscription: EmailSubscription
  errors: [Error!]
}

"""
Autogenerated input type of UpdateFirm
"""
input UpdateFirmInput {
  additionalInvoiceText: String
  additionalInvoiceTextUser: String @deprecated(reason: "this field should be updated via updateUser")
  allowInvoiceAutoCharge: Boolean
  backgroundTheme: BackgroundThemeEnum
  billingPlanId: ID
  billingPlanRawId: Int @deprecated(reason: "only used for legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currency: String
  defaultPaymentMethodId: ID
  description: String
  emailsForInvoices: [String!]

  """
  omit this to update the current user's firm
  """
  firmId: ID
  greenhouseApiKey: String
  invoiceSalariesInAdvance: Boolean
  invoiceSchedule: String
  logoUrl: String
  managerForNonPayrollFees: ID
  minSalaryDaysToInvoice: Int
  name: String
  nextAutoInvoiceDate: DateTime
  purchaseOrderNumberForNonPayrollFees: String
  purchaseOrderNumberUser: String @deprecated(reason: "this field should be updated via updateUser")
  timezoneName: String
  unifyInvoicesInPreferredCurrency: Boolean
  website: String
}

"""
Autogenerated return type of UpdateFirm.
"""
type UpdateFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  firm: Firm
}

"""
Autogenerated input type of UpdateJobDetails
"""
input UpdateJobDetailsInput {
  autoRenew: Boolean
  availabilityType: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: MoneyInput
  clientRateCents: Int
  country: String
  currency: String
  defaultDistance: Float
  description: String
  descriptionExperience: String
  descriptionResponsibilities: String
  freelancerSubtypes: [FreelancerSubtypeAttributes!]
  freelancerType: FreelancerTypeAttributes
  fullAddress: String
  jobCountries: [String!]
  jobId: ID
  jobSkills: [JobSkillAttributes!]
  locationLatitude: Float
  locationLongitude: Float
  locationType: String
  minClientRate: MoneyInput
  minClientRateCents: Int
  numberOfHires: Int
  positionTypes: [String!]
  projectLengthInMonths: Int
  rateMode: String
  referralBounty: MoneyInput
  referralBountyCents: Int
  region: String
  requiredExperienceYears: Int
  slug: String @deprecated(reason: "use jobId instead")
  status: JobStatus
  timezoneIdentifier: String
  timezoneRange: Int
  title: String
  userId: Int
}

"""
Autogenerated return type of UpdateJobDetails.
"""
type UpdateJobDetailsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateJobScreening
"""
input UpdateJobScreeningInput {
  allowTextualAnswers: Boolean
  autoSendScreeningRequests: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: ProjectAttributes
  questions: [QuestionAttributes!]
  requestVideoIntroduction: Boolean
  screeningRequestMessageTemplate: String
  slug: String!
}

"""
Autogenerated return type of UpdateJobScreening.
"""
type UpdateJobScreeningPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateJobSourcing
"""
input UpdateJobSourcingInput {
  activeJobIntegrationsNames: [String!]
  automaticallyNotifyCandidates: Boolean
  candidatesToNotify: [CandidateToNotifyAttributes!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  hiringManagerId: Int
  jobSocialIntegrations: [String!]
  linkedinCompanyId: String
  referralBounty: MoneyInput
  slug: String!
  userId: Int
}

"""
Autogenerated return type of UpdateJobSourcing.
"""
type UpdateJobSourcingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateProjectSubmission
"""
input UpdateProjectSubmissionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  projectSubmissionId: ID
  projectSubmissionRawId: Int @deprecated(reason: "only used to support some legacy frontend code")
  screenshotUrl: String
  status: ProjectSubmissionStatusEnum
  url: String
}

"""
Autogenerated return type of UpdateProjectSubmission.
"""
type UpdateProjectSubmissionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  projectSubmission: ProjectSubmission
}

"""
Autogenerated input type of UpdateSalary
"""
input UpdateSalaryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customAmount: Boolean
  daysOff: [Date!]
  editDescription: String
  salaryId: ID!
  totalToPayClient: MoneyInput
}

"""
Autogenerated return type of UpdateSalary.
"""
type UpdateSalaryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  salary: Salary
}

"""
Autogenerated input type of UpdateTimesheet
"""
input UpdateTimesheetInput {
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  endDate: Date
  projectCodes: [String!]
  startDate: Date
  submit: Boolean
  timesheetEntries: [TimesheetEntryAttributes!]
  timesheetId: ID
}

"""
Autogenerated return type of UpdateTimesheet.
"""
type UpdateTimesheetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheet: Timesheet
}

"""
Autogenerated input type of UpdateUnsubscribedFromAllEmails
"""
input UpdateUnsubscribedFromAllEmailsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if the user is logged out, the mutation can be performed using an unsubscribe token
  """
  token: String
  unsubscribeFromAllEmails: Boolean!
}

"""
Autogenerated return type of UpdateUnsubscribedFromAllEmails.
"""
type UpdateUnsubscribedFromAllEmailsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  unsubscribedFromAllEmails: Boolean
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  accept: Boolean
  additionalInvoiceText: String

  """
  used only for the frontend to autosave profile changes
  """
  autosave: Boolean
  avatarUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentPassword: String
  defaultPayoutMethodId: ID
  displayDialogAfterSavingDraftTimesheet: Boolean
  email: String
  firstName: String
  freelancerSubtypeRawIds: [Int!]
  hidden: Boolean
  lastName: String
  password: String
  passwordConfirmation: String
  phone: String
  profile: ProfileAttributes
  purchaseOrderNumber: String
  reject: Boolean
  sendTimesheetReminders: Boolean
  skills: [UserSkillAttributes!]
  status: String
  teamInvitationMessage: String
  timelineEntries: [TimelineEntryAttributes!]
  timezoneName: String
  timezoneOffset: Float
  unsubscribedFromAllEmails: Boolean

  """
  omit this to update the current user
  """
  userId: ID
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of UpdateVideo
"""
input UpdateVideoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if false, the video will not be displayed on the public profile
  """
  public: Boolean
  videoId: ID
  videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of UpdateVideo.
"""
type UpdateVideoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  video: Video
}

"""
Autogenerated input type of UpdateWebhook
"""
input UpdateWebhookInput {
  """
  if both this and authenticationHeaderValue are present, the header will be sent for all webhooks
  """
  authenticationHeaderName: String

  """
  this value is write-only. It can only be read in this mutation's result, if the mutation is changing it
  """
  authenticationHeaderValue: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if false, events will not be sent to this Webhook
  """
  enabled: Boolean
  id: ID!

  """
  HTTP POST requests with JSON bodies will be sent to this URL. The fields on
  the body are 'event_name', 'timestamp' (unix integer format) and 'records'
  (array of string IDs of related records)
  """
  url: String
}

"""
Autogenerated return type of UpdateWebhook.
"""
type UpdateWebhookPayload {
  """
  use this field if you need to validate that the authentication header value was set correctly
  """
  authenticationHeaderValue: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just edited
  """
  webhook: Webhook
}

type User implements Node {
  """
  extra text that will be added on invoices to this user
  """
  additionalInvoiceText: String
  allApplications(filters: CandidatesFilters): ApplicationsResults
  allBonuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BonusesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BonusConnection
  allCandidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: CandidatesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CandidateConnection

  """
  all chat messages from all threads that the user is in
  """
  allChatMessages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ChatMessageFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChatMessageConnection
  allContractStats(filters: ContractsFilters): ContractStats

  """
  will behave like firm.contracts for client accounts, and behave like the normal contracts field otherwise
  """
  allContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection @deprecated(reason: "only used in legacy frontend code")
  allExpenses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ExpensesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExpenseConnection
  allInvoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: InvoicesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InvoiceConnection
  allInvoicesSummary(filters: InvoicesFilters): InvoicesSummary
  allJobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  allPaymentMethods(cardsOnly: Boolean, exceptCards: Boolean): [PaymentMethod!]
  allPayrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection
  allSalaries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SalariesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalaryConnection
  allScreening(filters: CandidatesFilters): ApplicationsResults
  allTimesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection

  """
  video answers submitted by this user
  """
  answers(
    """
    filter by job raw id
    """
    jobId: Int
  ): [Video!]

  """
  will be true if this user can manage and use API keys
  """
  apiAccess: Boolean
  apiKeys: [ApiKey!]
  applications(filters: CandidatesFilters): ApplicationsResults
  appliedAt: DateTime
  avatarUrl: String
  backgroundCheck: BackgroundCheck
  backgroundCheckCompleted: Boolean @deprecated(reason: "read the backgroundCheck field instead")
  blockPlatformAccessDueToUnpaidInvoices: Boolean
  blockPlatformAccessDueToUnpaidInvoicesDate: Date
  blogPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogPostConnection
  bonusesStats(filters: BonusesFilters): PayrollStats
  calendlyUrl: String
  canMakeOffer: Boolean
  canNotify: Boolean
  canRequestInterview: Boolean
  canSetupPayoutMethod: Boolean
  candidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: CandidatesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CandidateConnection
  chatContacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): UserConnection @deprecated(reason: "use user.contacts instead")

  """
  all chat messages written by this user
  """
  chatMessages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ChatMessageFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChatMessageConnection
  chatThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): ChatThreadConnection
  clientBonuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BonusesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BonusConnection

  """
  all the contracts in which this user is involved as client
  """
  clientContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  clientExpenses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ExpensesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExpenseConnection
  clientPayrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection
  clientSalaries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SalariesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalaryConnection
  clientTimesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection
  colleagues: [User!]

  """
  frontend configuration values for this user
  """
  configuration: Configuration
  confirmedEmail: Boolean
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    set to true to refresh contacts. Recommended to first fetch with this
    parameter set to false (much faster), then fetch with this set to true
    (slower but might return new contacts)
    """
    refresh: Boolean
    search: String
  ): UserConnection
  contractSigned: Boolean
  contractStats: ContractStats
  contractorAgreementTemplateUrl: String
  contractorStatementOfWorkTemplateUrl: String

  """
  all the contracts in which this user is involved as client/manager or individual
  """
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  costBreakdown(
    """
    filter by employee or contractor
    """
    freelancerId: ID
    groupBy: PayrollBreakdownGroupByEnum!
  ): PayrollBreakdown
  createdAt: DateTime
  directChatThread: ChatThread
  displayDialogAfterSavingDraftTimesheet: Boolean
  email: String
  emailSubscriptions: [EmailSubscription!]
  expenses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ExpensesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExpenseConnection
  expensesStats(filters: ExpensesFilters): PayrollStats

  """
  true if this member has completed the feature step on their profile
  """
  featureStepCompleted: Boolean! @deprecated(reason: "use the backgroundCheck field instead")

  """
  true if this member is featured on the Flexhire homepage
  """
  featured: Boolean

  """
  for clients only. Associated companies this user has some level of manage access in
  """
  firms: [Firm!]
  firstName: String
  freelancerBonuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BonusesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BonusConnection

  """
  all the contracts in which this user is involved as invidivual
  """
  freelancerContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  freelancerPayrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection
  freelancerSalaries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SalariesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalaryConnection
  freelancerTimesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection
  fullAddress: String

  """
  if true, the user has an account but hasn't completed signup so should be treated as a user without an account
  """
  guest: Boolean!
  hasActivePayoutMethod: Boolean

  """
  true if this user has been invited to the platform with an offer
  """
  hasInvitationContracts: Boolean
  hasInvoiceAccess: Boolean

  """
  true if this client has any hired or invited members
  """
  hasTeam: Boolean
  hidden: Boolean
  hireSourcedByClientMargin: Float @deprecated(reason: "use firm.billingPlan values")
  hireSourcedByFlexhireMargin: Float @deprecated(reason: "use firm.billingPlan values")
  id: ID!
  incomeBreakdown(groupBy: PayrollBreakdownGroupByEnum!): PayrollBreakdown

  """
  name of the integration this user has been imported from, if any
  """
  integrationName: String
  inviteMargin: Float @deprecated(reason: "use firm.billingPlan values")

  """
  true if this user has been invited to apply to the given job
  """
  invitedToJob(jobId: Int, jobSlug: String): Boolean
  invoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: InvoicesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InvoiceConnection

  """
  true if this user is in the chat contacts of the current user
  """
  isChatContact: Boolean

  """
  if true, the user is a client on the platform, which means they are part of at
  least one firm with some level of management permissions
  """
  isClient: Boolean!

  """
  true if this user is a customer success rep for the current user's firm
  """
  isCustomerSuccessRep: Boolean
  isFlexhireTeam: Boolean

  """
  if true, the user is a member/individual on the platform and has a profile
  """
  isMember: Boolean!
  isProfileFeedback: Boolean

  """
  true if this user is a recruiter for the current user's firm
  """
  isRecruiter: Boolean
  jobApplicationsCount: Int

  """
  used in hire pipeline for candidates and potential applicants: contains any reasons for blocking application to job
  """
  jobIncompatibilityReasons(jobId: Int, jobSlug: String): [String!]
  jobOpportunities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  lastName: String
  lastSeenAt: DateTime
  location: String @deprecated(reason: "use country, fullAddress, city, region instead")

  """
  contract with this user's superior in the company. Only for clients
  """
  managerContract: Contract @deprecated(reason: "search contracts with firm filter instead")

  """
  saved message to send when inviting managers
  """
  managerInvitationMessage: String
  minMarginUsd: Float @deprecated(reason: "use country, fullAddress, city, region instead")

  """
  combination of firstName and lastName
  """
  name: String
  passwordSetupRequired: Boolean
  paychecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PaychecksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaycheckConnection
  paymentMethods(cardsOnly: Boolean, exceptCards: Boolean): [PaymentMethod!]

  """
  default payout method
  """
  payoutMethod: PayoutMethod
  payoutMethods: [PayoutMethod!]
  payouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayoutsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayoutConnection
  payoutsStats(filters: PayoutsFilters): PayoutsStats
  phone: String

  """
  for members only. Associated profile data
  """
  profile: Profile
  projectSubmissions: [ProjectSubmission!]

  """
  will be added to all invoices to this user
  """
  purchaseOrderNumber: String
  ratingCountHigh: Int
  ratingCountLow: Int
  ratingCountMedium: Int
  rawId: Int

  """
  will reference the 'real user' when using the masking feature to mask into another account
  """
  realUser: User

  """
  raw IDs of users whose invoices are being managed by this user
  """
  receivesInvoicesFor: [Int!]
  references: [Reference!]

  """
  the contract between your company and this user. Only for clients
  """
  relatedContract: Contract @deprecated(reason: "search contracts with firm filter instead")
  remoteDebugCode: String
  requestedBackgroundChecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BackgroundCheckConnection
  resume: Resume

  """
  list of roles the user has. These will affect API permissions and visibility and the frontend UI
  """
  roles: [UserRoleEnum!]!
  salariesStats(filters: SalariesFilters): PayrollStats
  screening(filters: CandidatesFilters): ApplicationsResults

  """
  will be true if this is the same user that is querying the API
  """
  self: Boolean
  sendTimesheetReminders: Boolean

  """
  true if it's a skipped candidate
  """
  skipped: Boolean

  """
  only relevant for members
  """
  status: UserStatus

  """
  recommended questions to answer to boost candidate score for a member
  """
  suggestedQuestions: [Question!]

  """
  saved message to send when inviting members
  """
  teamInvitationMessage: String
  termsOfServiceApproved: Boolean
  timelineEntries: [TimelineEntry!]
  timesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection @deprecated(reason: "use freelancerTimesheets instead")
  timesheetsStats(filters: TimesheetsFilters): PayrollStats
  timezone: String
  timezoneName: String
  timezoneOffset: Int

  """
  contains the new email address when changing address and not having the new one confirmed yet
  """
  unconfirmedEmail: String
  unsubscribedFromAllEmails: Boolean
  updatedAt: DateTime
  userSkills: [UserSkill!]

  """
  true if this member is pre-screened
  """
  verified: Boolean

  """
  video introduction
  """
  video: Video
  webhooks: [Webhook!]
  workingOrOfferedJob: Boolean
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

enum UserRoleEnum {
  """
  Flexhire admin, has the highest level of permissions possible
  """
  admin

  """
  Not in use at the moment
  """
  customer_success_rep

  """
  Can be assigned to customers and manage their hiring pipeline
  """
  recruiter

  """
  Flexhire sales account. Can manage firms
  """
  sales

  """
  Flexhire screening account. Can review member applications for pre-screening
  """
  screening
}

type UserSkill implements Node {
  experience: Int
  id: ID!
  skill: Skill
}

input UserSkillAttributes {
  experience: Int
  rawSkillId: Int!
}

enum UserStatus {
  accepted
  applied
  applying
  deleted
  interview
  pending
  rejected
  unverified
}

"""
Autogenerated return type of UserUpdated.
"""
type UserUpdatedPayload {
  user: User
}

type ValidationResult {
  error: String
  valid: Boolean!
}

type Video implements Node {
  available: Boolean!
  contractRequests: [ContractRequest!]
  createdAt: DateTime!

  """
  for company videos
  """
  firm: Firm
  id: ID!

  """
  video url served by CDN
  """
  optimizedUrl: String!

  """
  preview image for the video
  """
  posterUrl: String
  public: Boolean!

  """
  for video answers
  """
  question: Question
  rawId: Int
  status: VideoStatusEnum!

  """
  the raw file url of the video file
  """
  url: String!

  """
  video owner
  """
  user: User
  videoType: VideoTypeEnum!
}

enum VideoStatusEnum {
  pending
  processed
  processing
  processing_failed
  processing_queued
  unprocessed
}

enum VideoTypeEnum {
  answer
  blog_post
  company
  profile
}

"""
Autogenerated return type of VideoUpdated.
"""
type VideoUpdatedPayload {
  video: Video
}

"""
webhooks used by Flexhire to send events to external services
"""
type Webhook implements Node {
  """
  if both this and authenticationHeaderValue are present, the header will be
  sent for all webhooks. The value is not write-only for security reasons.
  """
  authenticationHeaderName: String

  """
  this field will always return null for security reasons
  """
  authenticationHeaderValue: String

  """
  if false, events won't be sent
  """
  enabled: Boolean!
  id: ID!
  url: String!
  webhookDeliveries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WebhookDeliveryConnection
}

type WebhookDelivery implements Node {
  createdAt: DateTime!
  eventName: String!
  id: ID!
  status: String!
  webhook: Webhook
}

"""
The connection type for WebhookDelivery.
"""
type WebhookDeliveryConnection {
  """
  A list of edges.
  """
  edges: [WebhookDeliveryEdge]

  """
  A list of nodes.
  """
  nodes: [WebhookDelivery]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type WebhookDeliveryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WebhookDelivery
}
